"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/w3c-xmlserializer";
exports.ids = ["vendor-chunks/w3c-xmlserializer"];
exports.modules = {

/***/ "(ssr)/./node_modules/w3c-xmlserializer/lib/attributes.js":
/*!**********************************************************!*\
  !*** ./node_modules/w3c-xmlserializer/lib/attributes.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst xnv = __webpack_require__(/*! xml-name-validator */ \"(ssr)/./node_modules/xml-name-validator/lib/xml-name-validator.js\");\n\nconst { NAMESPACES } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/w3c-xmlserializer/lib/constants.js\");\n\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  const generatedPrefix = `ns${prefixIndex}`;\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\n\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  const candidateList = map[ns];\n  if (!candidateList) {\n    return null;\n  }\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n  return candidateList[candidateList.length - 1];\n}\n\nfunction serializeAttributeValue(value/* , requireWellFormed*/) {\n  if (value === null) {\n    return \"\";\n  }\n  // TODO: Check well-formedness\n  return value\n    .replace(/&/ug, \"&amp;\")\n    .replace(/\"/ug, \"&quot;\")\n    .replace(/</ug, \"&lt;\")\n    .replace(/>/ug, \"&gt;\")\n    .replace(/\\t/ug, \"&#x9;\")\n    .replace(/\\n/ug, \"&#xA;\")\n    .replace(/\\r/ug, \"&#xD;\");\n}\n\nfunction serializeAttributes(\n  element,\n  map,\n  localPrefixes,\n  ignoreNamespaceDefAttr,\n  requireWellFormed,\n  refs\n) {\n  let result = \"\";\n  const namespaceLocalnames = Object.create(null);\n  for (const attr of element.attributes) {\n    if (\n      requireWellFormed &&\n      namespaceLocalnames[attr.namespaceURI] &&\n      namespaceLocalnames[attr.namespaceURI].has(attr.localName)\n    ) {\n      throw new Error(\"Found duplicated attribute\");\n    }\n    if (!namespaceLocalnames[attr.namespaceURI]) {\n      namespaceLocalnames[attr.namespaceURI] = new Set();\n    }\n    namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n    const attributeNamespace = attr.namespaceURI;\n    let candidatePrefix = null;\n    if (attributeNamespace !== null) {\n      candidatePrefix = preferredPrefixString(\n        map,\n        attributeNamespace,\n        attr.prefix\n      );\n      if (attributeNamespace === NAMESPACES.XMLNS) {\n        if (\n          attr.value === NAMESPACES.XML ||\n          (attr.prefix === null && ignoreNamespaceDefAttr) ||\n          (attr.prefix !== null &&\n            localPrefixes[attr.localName] !== attr.value &&\n            map[attr.value].includes(attr.localName))\n        ) {\n          continue;\n        }\n        if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n          throw new Error(\n            \"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\"\n          );\n        }\n        if (requireWellFormed && attr.value === \"\") {\n          throw new Error(\n            \"Namespace prefix declarations cannot be used to undeclare a namespace\"\n          );\n        }\n        if (attr.prefix === \"xmlns\") {\n          candidatePrefix = \"xmlns\";\n        }\n      } else if (candidatePrefix === null) {\n        candidatePrefix = generatePrefix(\n          map,\n          attributeNamespace,\n          refs.prefixIndex++\n        );\n        result += ` xmlns:${candidatePrefix}=\"${serializeAttributeValue(\n          attributeNamespace,\n          requireWellFormed\n        )}\"`;\n      }\n    }\n\n    result += \" \";\n    if (candidatePrefix !== null) {\n      result += `${candidatePrefix}:`;\n    }\n    if (\n      requireWellFormed &&\n      (attr.localName.includes(\":\") ||\n        !xnv.name(attr.localName) ||\n        (attr.localName === \"xmlns\" && attributeNamespace === null))\n    ) {\n      throw new Error(\"Invalid attribute localName value\");\n    }\n    result += `${attr.localName}=\"${serializeAttributeValue(attr.value, requireWellFormed)}\"`;\n  }\n  return result;\n}\n\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdzNjLXhtbHNlcmlhbGl6ZXIvbGliL2F0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLDZGQUFvQjs7QUFFeEMsUUFBUSxhQUFhLEVBQUUsbUJBQU8sQ0FBQyw0RUFBYTs7QUFFNUM7QUFDQSwrQkFBK0IsWUFBWTtBQUMzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnQkFBZ0IsSUFBSTtBQUNoRDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGVBQWUsSUFBSSx1REFBdUQ7QUFDM0Y7QUFDQTtBQUNBOztBQUVBLG9DQUFvQztBQUNwQyw2QkFBNkI7QUFDN0Isc0NBQXNDO0FBQ3RDLGtDQUFrQyIsInNvdXJjZXMiOlsiL1VzZXJzL21hbm55aWx1cGVqdS9yZXZlaWxsZXJzdHVkaW9zLXdlYnNpdGUvcmV2ZWlsbGVyc3R1ZGlvcy9ub2RlX21vZHVsZXMvdzNjLXhtbHNlcmlhbGl6ZXIvbGliL2F0dHJpYnV0ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHhudiA9IHJlcXVpcmUoXCJ4bWwtbmFtZS12YWxpZGF0b3JcIik7XG5cbmNvbnN0IHsgTkFNRVNQQUNFUyB9ID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVByZWZpeChtYXAsIG5ld05hbWVzcGFjZSwgcHJlZml4SW5kZXgpIHtcbiAgY29uc3QgZ2VuZXJhdGVkUHJlZml4ID0gYG5zJHtwcmVmaXhJbmRleH1gO1xuICBtYXBbbmV3TmFtZXNwYWNlXSA9IFtnZW5lcmF0ZWRQcmVmaXhdO1xuICByZXR1cm4gZ2VuZXJhdGVkUHJlZml4O1xufVxuXG5mdW5jdGlvbiBwcmVmZXJyZWRQcmVmaXhTdHJpbmcobWFwLCBucywgcHJlZmVycmVkUHJlZml4KSB7XG4gIGNvbnN0IGNhbmRpZGF0ZUxpc3QgPSBtYXBbbnNdO1xuICBpZiAoIWNhbmRpZGF0ZUxpc3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoY2FuZGlkYXRlTGlzdC5pbmNsdWRlcyhwcmVmZXJyZWRQcmVmaXgpKSB7XG4gICAgcmV0dXJuIHByZWZlcnJlZFByZWZpeDtcbiAgfVxuICByZXR1cm4gY2FuZGlkYXRlTGlzdFtjYW5kaWRhdGVMaXN0Lmxlbmd0aCAtIDFdO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSh2YWx1ZS8qICwgcmVxdWlyZVdlbGxGb3JtZWQqLykge1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICAvLyBUT0RPOiBDaGVjayB3ZWxsLWZvcm1lZG5lc3NcbiAgcmV0dXJuIHZhbHVlXG4gICAgLnJlcGxhY2UoLyYvdWcsIFwiJmFtcDtcIilcbiAgICAucmVwbGFjZSgvXCIvdWcsIFwiJnF1b3Q7XCIpXG4gICAgLnJlcGxhY2UoLzwvdWcsIFwiJmx0O1wiKVxuICAgIC5yZXBsYWNlKC8+L3VnLCBcIiZndDtcIilcbiAgICAucmVwbGFjZSgvXFx0L3VnLCBcIiYjeDk7XCIpXG4gICAgLnJlcGxhY2UoL1xcbi91ZywgXCImI3hBO1wiKVxuICAgIC5yZXBsYWNlKC9cXHIvdWcsIFwiJiN4RDtcIik7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUF0dHJpYnV0ZXMoXG4gIGVsZW1lbnQsXG4gIG1hcCxcbiAgbG9jYWxQcmVmaXhlcyxcbiAgaWdub3JlTmFtZXNwYWNlRGVmQXR0cixcbiAgcmVxdWlyZVdlbGxGb3JtZWQsXG4gIHJlZnNcbikge1xuICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgY29uc3QgbmFtZXNwYWNlTG9jYWxuYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAoY29uc3QgYXR0ciBvZiBlbGVtZW50LmF0dHJpYnV0ZXMpIHtcbiAgICBpZiAoXG4gICAgICByZXF1aXJlV2VsbEZvcm1lZCAmJlxuICAgICAgbmFtZXNwYWNlTG9jYWxuYW1lc1thdHRyLm5hbWVzcGFjZVVSSV0gJiZcbiAgICAgIG5hbWVzcGFjZUxvY2FsbmFtZXNbYXR0ci5uYW1lc3BhY2VVUkldLmhhcyhhdHRyLmxvY2FsTmFtZSlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZvdW5kIGR1cGxpY2F0ZWQgYXR0cmlidXRlXCIpO1xuICAgIH1cbiAgICBpZiAoIW5hbWVzcGFjZUxvY2FsbmFtZXNbYXR0ci5uYW1lc3BhY2VVUkldKSB7XG4gICAgICBuYW1lc3BhY2VMb2NhbG5hbWVzW2F0dHIubmFtZXNwYWNlVVJJXSA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgbmFtZXNwYWNlTG9jYWxuYW1lc1thdHRyLm5hbWVzcGFjZVVSSV0uYWRkKGF0dHIubG9jYWxOYW1lKTtcbiAgICBjb25zdCBhdHRyaWJ1dGVOYW1lc3BhY2UgPSBhdHRyLm5hbWVzcGFjZVVSSTtcbiAgICBsZXQgY2FuZGlkYXRlUHJlZml4ID0gbnVsbDtcbiAgICBpZiAoYXR0cmlidXRlTmFtZXNwYWNlICE9PSBudWxsKSB7XG4gICAgICBjYW5kaWRhdGVQcmVmaXggPSBwcmVmZXJyZWRQcmVmaXhTdHJpbmcoXG4gICAgICAgIG1hcCxcbiAgICAgICAgYXR0cmlidXRlTmFtZXNwYWNlLFxuICAgICAgICBhdHRyLnByZWZpeFxuICAgICAgKTtcbiAgICAgIGlmIChhdHRyaWJ1dGVOYW1lc3BhY2UgPT09IE5BTUVTUEFDRVMuWE1MTlMpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGF0dHIudmFsdWUgPT09IE5BTUVTUEFDRVMuWE1MIHx8XG4gICAgICAgICAgKGF0dHIucHJlZml4ID09PSBudWxsICYmIGlnbm9yZU5hbWVzcGFjZURlZkF0dHIpIHx8XG4gICAgICAgICAgKGF0dHIucHJlZml4ICE9PSBudWxsICYmXG4gICAgICAgICAgICBsb2NhbFByZWZpeGVzW2F0dHIubG9jYWxOYW1lXSAhPT0gYXR0ci52YWx1ZSAmJlxuICAgICAgICAgICAgbWFwW2F0dHIudmFsdWVdLmluY2x1ZGVzKGF0dHIubG9jYWxOYW1lKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcXVpcmVXZWxsRm9ybWVkICYmIGF0dHIudmFsdWUgPT09IE5BTUVTUEFDRVMuWE1MTlMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIlRoZSBYTUxOUyBuYW1lc3BhY2UgaXMgcmVzZXJ2ZWQgYW5kIGNhbm5vdCBiZSBhcHBsaWVkIGFzIGFuIGVsZW1lbnQncyBuYW1lc3BhY2UgdmlhIFhNTCBwYXJzaW5nXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXF1aXJlV2VsbEZvcm1lZCAmJiBhdHRyLnZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJOYW1lc3BhY2UgcHJlZml4IGRlY2xhcmF0aW9ucyBjYW5ub3QgYmUgdXNlZCB0byB1bmRlY2xhcmUgYSBuYW1lc3BhY2VcIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHIucHJlZml4ID09PSBcInhtbG5zXCIpIHtcbiAgICAgICAgICBjYW5kaWRhdGVQcmVmaXggPSBcInhtbG5zXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2FuZGlkYXRlUHJlZml4ID09PSBudWxsKSB7XG4gICAgICAgIGNhbmRpZGF0ZVByZWZpeCA9IGdlbmVyYXRlUHJlZml4KFxuICAgICAgICAgIG1hcCxcbiAgICAgICAgICBhdHRyaWJ1dGVOYW1lc3BhY2UsXG4gICAgICAgICAgcmVmcy5wcmVmaXhJbmRleCsrXG4gICAgICAgICk7XG4gICAgICAgIHJlc3VsdCArPSBgIHhtbG5zOiR7Y2FuZGlkYXRlUHJlZml4fT1cIiR7c2VyaWFsaXplQXR0cmlidXRlVmFsdWUoXG4gICAgICAgICAgYXR0cmlidXRlTmFtZXNwYWNlLFxuICAgICAgICAgIHJlcXVpcmVXZWxsRm9ybWVkXG4gICAgICAgICl9XCJgO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlc3VsdCArPSBcIiBcIjtcbiAgICBpZiAoY2FuZGlkYXRlUHJlZml4ICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQgKz0gYCR7Y2FuZGlkYXRlUHJlZml4fTpgO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICByZXF1aXJlV2VsbEZvcm1lZCAmJlxuICAgICAgKGF0dHIubG9jYWxOYW1lLmluY2x1ZGVzKFwiOlwiKSB8fFxuICAgICAgICAheG52Lm5hbWUoYXR0ci5sb2NhbE5hbWUpIHx8XG4gICAgICAgIChhdHRyLmxvY2FsTmFtZSA9PT0gXCJ4bWxuc1wiICYmIGF0dHJpYnV0ZU5hbWVzcGFjZSA9PT0gbnVsbCkpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGF0dHJpYnV0ZSBsb2NhbE5hbWUgdmFsdWVcIik7XG4gICAgfVxuICAgIHJlc3VsdCArPSBgJHthdHRyLmxvY2FsTmFtZX09XCIke3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKGF0dHIudmFsdWUsIHJlcXVpcmVXZWxsRm9ybWVkKX1cImA7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMucHJlZmVycmVkUHJlZml4U3RyaW5nID0gcHJlZmVycmVkUHJlZml4U3RyaW5nO1xubW9kdWxlLmV4cG9ydHMuZ2VuZXJhdGVQcmVmaXggPSBnZW5lcmF0ZVByZWZpeDtcbm1vZHVsZS5leHBvcnRzLnNlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlID0gc2VyaWFsaXplQXR0cmlidXRlVmFsdWU7XG5tb2R1bGUuZXhwb3J0cy5zZXJpYWxpemVBdHRyaWJ1dGVzID0gc2VyaWFsaXplQXR0cmlidXRlcztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/w3c-xmlserializer/lib/attributes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/w3c-xmlserializer/lib/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/w3c-xmlserializer/lib/constants.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports.NAMESPACES = {\n  HTML: \"http://www.w3.org/1999/xhtml\",\n  XML: \"http://www.w3.org/XML/1998/namespace\",\n  XMLNS: \"http://www.w3.org/2000/xmlns/\"\n};\n\nmodule.exports.NODE_TYPES = {\n  ELEMENT_NODE: 1,\n  ATTRIBUTE_NODE: 2, // historical\n  TEXT_NODE: 3,\n  CDATA_SECTION_NODE: 4,\n  ENTITY_REFERENCE_NODE: 5, // historical\n  ENTITY_NODE: 6, // historical\n  PROCESSING_INSTRUCTION_NODE: 7,\n  COMMENT_NODE: 8,\n  DOCUMENT_NODE: 9,\n  DOCUMENT_TYPE_NODE: 10,\n  DOCUMENT_FRAGMENT_NODE: 11,\n  NOTATION_NODE: 12 // historical\n};\n\nmodule.exports.VOID_ELEMENTS = new Set([\n  \"area\",\n  \"base\",\n  \"basefont\",\n  \"bgsound\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"frame\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"keygen\",\n  \"link\",\n  \"menuitem\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\"\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdzNjLXhtbHNlcmlhbGl6ZXIvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYix5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWFubnlpbHVwZWp1L3JldmVpbGxlcnN0dWRpb3Mtd2Vic2l0ZS9yZXZlaWxsZXJzdHVkaW9zL25vZGVfbW9kdWxlcy93M2MteG1sc2VyaWFsaXplci9saWIvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cy5OQU1FU1BBQ0VTID0ge1xuICBIVE1MOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcbiAgWE1MOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICBYTUxOUzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuXG5tb2R1bGUuZXhwb3J0cy5OT0RFX1RZUEVTID0ge1xuICBFTEVNRU5UX05PREU6IDEsXG4gIEFUVFJJQlVURV9OT0RFOiAyLCAvLyBoaXN0b3JpY2FsXG4gIFRFWFRfTk9ERTogMyxcbiAgQ0RBVEFfU0VDVElPTl9OT0RFOiA0LFxuICBFTlRJVFlfUkVGRVJFTkNFX05PREU6IDUsIC8vIGhpc3RvcmljYWxcbiAgRU5USVRZX05PREU6IDYsIC8vIGhpc3RvcmljYWxcbiAgUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFOiA3LFxuICBDT01NRU5UX05PREU6IDgsXG4gIERPQ1VNRU5UX05PREU6IDksXG4gIERPQ1VNRU5UX1RZUEVfTk9ERTogMTAsXG4gIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6IDExLFxuICBOT1RBVElPTl9OT0RFOiAxMiAvLyBoaXN0b3JpY2FsXG59O1xuXG5tb2R1bGUuZXhwb3J0cy5WT0lEX0VMRU1FTlRTID0gbmV3IFNldChbXG4gIFwiYXJlYVwiLFxuICBcImJhc2VcIixcbiAgXCJiYXNlZm9udFwiLFxuICBcImJnc291bmRcIixcbiAgXCJiclwiLFxuICBcImNvbFwiLFxuICBcImVtYmVkXCIsXG4gIFwiZnJhbWVcIixcbiAgXCJoclwiLFxuICBcImltZ1wiLFxuICBcImlucHV0XCIsXG4gIFwia2V5Z2VuXCIsXG4gIFwibGlua1wiLFxuICBcIm1lbnVpdGVtXCIsXG4gIFwibWV0YVwiLFxuICBcInBhcmFtXCIsXG4gIFwic291cmNlXCIsXG4gIFwidHJhY2tcIixcbiAgXCJ3YnJcIlxuXSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/w3c-xmlserializer/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/w3c-xmlserializer/lib/serialize.js":
/*!*********************************************************!*\
  !*** ./node_modules/w3c-xmlserializer/lib/serialize.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst xnv = __webpack_require__(/*! xml-name-validator */ \"(ssr)/./node_modules/xml-name-validator/lib/xml-name-validator.js\");\n\nconst attributeUtils = __webpack_require__(/*! ./attributes */ \"(ssr)/./node_modules/w3c-xmlserializer/lib/attributes.js\");\nconst { NAMESPACES, VOID_ELEMENTS, NODE_TYPES } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/w3c-xmlserializer/lib/constants.js\");\n\nconst XML_CHAR = /^(\\x09|\\x0A|\\x0D|[\\x20-\\uD7FF]|[\\uE000-\\uFFFD]|[\\u{10000}-\\u{10FFFF}])*$/u;\nconst PUBID_CHAR = /^(\\x20|\\x0D|\\x0A|[a-zA-Z0-9]|[-'()+,./:=?;!*#@$_%])*$/u;\n\nfunction asciiCaseInsensitiveMatch(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; ++i) {\n    if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction recordNamespaceInformation(element, map, prefixMap) {\n  let defaultNamespaceAttrValue = null;\n  for (let i = 0; i < element.attributes.length; ++i) {\n    const attr = element.attributes[i];\n    if (attr.namespaceURI === NAMESPACES.XMLNS) {\n      if (attr.prefix === null) {\n        defaultNamespaceAttrValue = attr.value;\n        continue;\n      }\n      let namespaceDefinition = attr.value;\n      if (namespaceDefinition === NAMESPACES.XML) {\n        continue;\n      }\n      // This is exactly the other way than the spec says, but that's intended.\n      // All the maps coalesce null to the empty string (explained in the\n      // spec), so instead of doing that every time, just do it once here.\n      if (namespaceDefinition === null) {\n        namespaceDefinition = \"\";\n      }\n\n      if (\n        namespaceDefinition in map &&\n        map[namespaceDefinition].includes(attr.localName)\n      ) {\n        continue;\n      }\n      if (!(namespaceDefinition in map)) {\n        map[namespaceDefinition] = [];\n      }\n      map[namespaceDefinition].push(attr.localName);\n      prefixMap[attr.localName] = namespaceDefinition;\n    }\n  }\n  return defaultNamespaceAttrValue;\n}\n\nfunction serializeDocumentType(node, namespace, prefixMap, requireWellFormed) {\n  if (requireWellFormed && !PUBID_CHAR.test(node.publicId)) {\n    throw new Error(\"Failed to serialize XML: document type node publicId is not well-formed.\");\n  }\n\n  if (\n    requireWellFormed &&\n    (!XML_CHAR.test(node.systemId) ||\n      (node.systemId.includes('\"') && node.systemId.includes(\"'\")))\n  ) {\n    throw new Error(\"Failed to serialize XML: document type node systemId is not well-formed.\");\n  }\n\n  let markup = `<!DOCTYPE ${node.name}`;\n  if (node.publicId !== \"\") {\n    markup += ` PUBLIC \"${node.publicId}\"`;\n  } else if (node.systemId !== \"\") {\n    markup += \" SYSTEM\";\n  }\n  if (node.systemId !== \"\") {\n    markup += ` \"${node.systemId}\"`;\n  }\n  return `${markup}>`;\n}\n\nfunction serializeProcessingInstruction(\n  node,\n  namespace,\n  prefixMap,\n  requireWellFormed\n) {\n  if (\n    requireWellFormed &&\n    (node.target.includes(\":\") || asciiCaseInsensitiveMatch(node.target, \"xml\"))\n  ) {\n    throw new Error(\"Failed to serialize XML: processing instruction node target is not well-formed.\");\n  }\n  if (\n    requireWellFormed &&\n    (!XML_CHAR.test(node.data) || node.data.includes(\"?>\"))\n  ) {\n    throw new Error(\"Failed to serialize XML: processing instruction node data is not well-formed.\");\n  }\n  return `<?${node.target} ${node.data}?>`;\n}\n\nfunction serializeDocument(\n  node,\n  namespace,\n  prefixMap,\n  requireWellFormed,\n  refs\n) {\n  if (requireWellFormed && node.documentElement === null) {\n    throw new Error(\"Failed to serialize XML: document does not have a document element.\");\n  }\n  let serializedDocument = \"\";\n  for (const child of node.childNodes) {\n    serializedDocument += xmlSerialization(\n      child,\n      namespace,\n      prefixMap,\n      requireWellFormed,\n      refs\n    );\n  }\n  return serializedDocument;\n}\n\nfunction serializeDocumentFragment(\n  node,\n  namespace,\n  prefixMap,\n  requireWellFormed,\n  refs\n) {\n  let markup = \"\";\n  for (const child of node.childNodes) {\n    markup += xmlSerialization(\n      child,\n      namespace,\n      prefixMap,\n      requireWellFormed,\n      refs\n    );\n  }\n  return markup;\n}\n\nfunction serializeText(node, namespace, prefixMap, requireWellFormed) {\n  if (requireWellFormed && !XML_CHAR.test(node.data)) {\n    throw new Error(\"Failed to serialize XML: text node data is not well-formed.\");\n  }\n\n  return node.data\n    .replace(/&/ug, \"&amp;\")\n    .replace(/</ug, \"&lt;\")\n    .replace(/>/ug, \"&gt;\");\n}\n\nfunction serializeComment(node, namespace, prefixMap, requireWellFormed) {\n  if (requireWellFormed && !XML_CHAR.test(node.data)) {\n    throw new Error(\"Failed to serialize XML: comment node data is not well-formed.\");\n  }\n\n  if (\n    requireWellFormed &&\n    (node.data.includes(\"--\") || node.data.endsWith(\"-\"))\n  ) {\n    throw new Error(\"Failed to serialize XML: found hyphens in illegal places in comment node data.\");\n  }\n  return `<!--${node.data}-->`;\n}\n\nfunction serializeElement(node, namespace, prefixMap, requireWellFormed, refs) {\n  if (\n    requireWellFormed &&\n    (node.localName.includes(\":\") || !xnv.name(node.localName))\n  ) {\n    throw new Error(\"Failed to serialize XML: element node localName is not a valid XML name.\");\n  }\n  let markup = \"<\";\n  let qualifiedName = \"\";\n  let skipEndTag = false;\n  let ignoreNamespaceDefinitionAttr = false;\n  const map = { ...prefixMap };\n  const localPrefixesMap = Object.create(null);\n  const localDefaultNamespace = recordNamespaceInformation(\n    node,\n    map,\n    localPrefixesMap\n  );\n  let inheritedNs = namespace;\n  const ns = node.namespaceURI;\n  if (inheritedNs === ns) {\n    if (localDefaultNamespace !== null) {\n      ignoreNamespaceDefinitionAttr = true;\n    }\n    if (ns === NAMESPACES.XML) {\n      qualifiedName = `xml:${node.localName}`;\n    } else {\n      qualifiedName = node.localName;\n    }\n    markup += qualifiedName;\n  } else {\n    let { prefix } = node;\n    let candidatePrefix = attributeUtils.preferredPrefixString(map, ns, prefix);\n    if (prefix === \"xmlns\") {\n      if (requireWellFormed) {\n        throw new Error(\"Failed to serialize XML: element nodes can't have a prefix of \\\"xmlns\\\".\");\n      }\n      candidatePrefix = \"xmlns\";\n    }\n    if (candidatePrefix !== null) {\n      qualifiedName = `${candidatePrefix}:${node.localName}`;\n      if (\n        localDefaultNamespace !== null &&\n        localDefaultNamespace !== NAMESPACES.XML\n      ) {\n        inheritedNs =\n          localDefaultNamespace === \"\" ? null : localDefaultNamespace;\n      }\n      markup += qualifiedName;\n    } else if (prefix !== null) {\n      if (prefix in localPrefixesMap) {\n        prefix = attributeUtils.generatePrefix(map, ns, refs.prefixIndex++);\n      }\n      if (map[ns]) {\n        map[ns].push(prefix);\n      } else {\n        map[ns] = [prefix];\n      }\n      qualifiedName = `${prefix}:${node.localName}`;\n      markup += `${qualifiedName} xmlns:${prefix}=\"${attributeUtils.serializeAttributeValue(ns, requireWellFormed)}\"`;\n      if (localDefaultNamespace !== null) {\n        inheritedNs =\n          localDefaultNamespace === \"\" ? null : localDefaultNamespace;\n      }\n    } else if (localDefaultNamespace === null || localDefaultNamespace !== ns) {\n      ignoreNamespaceDefinitionAttr = true;\n      qualifiedName = node.localName;\n      inheritedNs = ns;\n      markup += `${qualifiedName} xmlns=\"${attributeUtils.serializeAttributeValue(ns, requireWellFormed)}\"`;\n    } else {\n      qualifiedName = node.localName;\n      inheritedNs = ns;\n      markup += qualifiedName;\n    }\n  }\n\n  markup += attributeUtils.serializeAttributes(\n    node,\n    map,\n    localPrefixesMap,\n    ignoreNamespaceDefinitionAttr,\n    requireWellFormed,\n    refs\n  );\n\n  if (\n    ns === NAMESPACES.HTML &&\n    node.childNodes.length === 0 &&\n    VOID_ELEMENTS.has(node.localName)\n  ) {\n    markup += \" /\";\n    skipEndTag = true;\n  } else if (ns !== NAMESPACES.HTML && node.childNodes.length === 0) {\n    markup += \"/\";\n    skipEndTag = true;\n  }\n  markup += \">\";\n  if (skipEndTag) {\n    return markup;\n  }\n\n  if (ns === NAMESPACES.HTML && node.localName === \"template\") {\n    markup += xmlSerialization(\n      node.content,\n      inheritedNs,\n      map,\n      requireWellFormed,\n      refs\n    );\n  } else {\n    for (const child of node.childNodes) {\n      markup += xmlSerialization(\n        child,\n        inheritedNs,\n        map,\n        requireWellFormed,\n        refs\n      );\n    }\n  }\n  markup += `</${qualifiedName}>`;\n  return markup;\n}\n\nfunction serializeCDATASection(node) {\n  return `<![CDATA[${node.data}]]>`;\n}\n\n/**\n * @param {{prefixIndex: number}} refs\n */\nfunction xmlSerialization(node, namespace, prefixMap, requireWellFormed, refs) {\n  switch (node.nodeType) {\n    case NODE_TYPES.ELEMENT_NODE:\n      return serializeElement(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed,\n        refs\n      );\n    case NODE_TYPES.DOCUMENT_NODE:\n      return serializeDocument(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed,\n        refs\n      );\n    case NODE_TYPES.COMMENT_NODE:\n      return serializeComment(node, namespace, prefixMap, requireWellFormed);\n    case NODE_TYPES.TEXT_NODE:\n      return serializeText(node, namespace, prefixMap, requireWellFormed);\n    case NODE_TYPES.DOCUMENT_FRAGMENT_NODE:\n      return serializeDocumentFragment(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed,\n        refs\n      );\n    case NODE_TYPES.DOCUMENT_TYPE_NODE:\n      return serializeDocumentType(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed\n      );\n    case NODE_TYPES.PROCESSING_INSTRUCTION_NODE:\n      return serializeProcessingInstruction(\n        node,\n        namespace,\n        prefixMap,\n        requireWellFormed\n      );\n    case NODE_TYPES.ATTRIBUTE_NODE:\n      return \"\";\n    case NODE_TYPES.CDATA_SECTION_NODE:\n      return serializeCDATASection(node);\n    default:\n      throw new TypeError(\"Failed to serialize XML: only Nodes can be serialized.\");\n  }\n}\n\nmodule.exports = (root, { requireWellFormed = false } = {}) => {\n  const namespacePrefixMap = Object.create(null);\n  namespacePrefixMap[\"http://www.w3.org/XML/1998/namespace\"] = [\"xml\"];\n  return xmlSerialization(root, null, namespacePrefixMap, requireWellFormed, {\n    prefixIndex: 1\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/w3c-xmlserializer/lib/serialize.js\n");

/***/ })

};
;