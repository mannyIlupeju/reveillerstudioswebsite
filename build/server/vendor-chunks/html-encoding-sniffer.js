"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/html-encoding-sniffer";
exports.ids = ["vendor-chunks/html-encoding-sniffer"];
exports.modules = {

/***/ "(ssr)/./node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst whatwgEncoding = __webpack_require__(/*! whatwg-encoding */ \"(ssr)/./node_modules/whatwg-encoding/lib/whatwg-encoding.js\");\n\n// https://html.spec.whatwg.org/#encoding-sniffing-algorithm\nmodule.exports = (uint8Array, { transportLayerEncodingLabel, defaultEncoding = \"windows-1252\" } = {}) => {\n  let encoding = whatwgEncoding.getBOMEncoding(uint8Array);\n\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\n  }\n\n  if (encoding === null) {\n    encoding = prescanMetaCharset(uint8Array);\n  }\n\n  if (encoding === null) {\n    encoding = defaultEncoding;\n  }\n\n  return encoding;\n};\n\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\nfunction prescanMetaCharset(uint8Array) {\n  const l = Math.min(uint8Array.byteLength, 1024);\n  for (let i = 0; i < l; i++) {\n    let c = uint8Array[i];\n    if (c === 0x3C) {\n      // \"<\"\n      const c1 = uint8Array[i + 1];\n      const c2 = uint8Array[i + 2];\n      const c3 = uint8Array[i + 3];\n      const c4 = uint8Array[i + 4];\n      const c5 = uint8Array[i + 5];\n      // !-- (comment start)\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n        for (; i < l; i++) {\n          c = uint8Array[i];\n          const cMinus1 = uint8Array[i - 1];\n          const cMinus2 = uint8Array[i - 2];\n          // --> (comment end)\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) &&\n         (c2 === 0x45 || c2 === 0x65) &&\n         (c3 === 0x54 || c3 === 0x74) &&\n         (c4 === 0x41 || c4 === 0x61) &&\n         (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        const attributeList = new Set();\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n\n        let attrRes;\n        do {\n          attrRes = getAttribute(uint8Array, i, l);\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\n            attributeList.add(attrRes.attr.name);\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n          i = attrRes.i;\n        } while (attrRes.attr);\n\n        if (needPragma === null) {\n          continue;\n        }\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n        if (charset === null) {\n          continue;\n        }\n\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n\n        return charset;\n      } else if ((c1 >= 0x41 && c1 <= 0x5A) || (c1 >= 0x61 && c1 <= 0x7A)) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = uint8Array[i];\n          // space or >\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n        let attrRes;\n        do {\n          attrRes = getAttribute(uint8Array, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = uint8Array[i];\n          // >\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\n// https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\nfunction getAttribute(uint8Array, i, l) {\n  for (; i < l; i++) {\n    let c = uint8Array[i];\n    // space or /\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    }\n    // \">\"\n    if (c === 0x3E) {\n      break;\n    }\n    let name = \"\";\n    let value = \"\";\n    nameLoop:for (; i < l; i++) {\n      c = uint8Array[i];\n      // \"=\"\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      }\n      // space\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = uint8Array[i];\n          // space\n          if (isSpaceCharacter(c)) {\n            continue;\n          }\n          // not \"=\"\n          if (c !== 0x3D) {\n            return { attr: { name, value }, i };\n          }\n\n          i++;\n          break nameLoop;\n        }\n        break;\n      }\n      // / or >\n      if (c === 0x2F || c === 0x3E) {\n        return { attr: { name, value }, i };\n      }\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n    c = uint8Array[i];\n    // space\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = uint8Array[i];\n        // space\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    }\n    // \" or '\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n      for (i++; i < l; i++) {\n        c = uint8Array[i];\n\n        if (c === quote) {\n          i++;\n          return { attr: { name, value }, i };\n        }\n\n        // A-Z\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    }\n\n    // >\n    if (c === 0x3E) {\n      return { attr: { name, value }, i };\n    }\n\n    // A-Z\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n\n    for (i++; i < l; i++) {\n      c = uint8Array[i];\n\n      // space or >\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return { attr: { name, value }, i };\n      }\n\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n  return { i };\n}\n\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n\n  while (true) {\n    const indexOfCharset = string.substring(position).search(/charset/ui);\n\n    if (indexOfCharset === -1) {\n      return null;\n    }\n    let subPosition = position + indexOfCharset + \"charset\".length;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n\n    ++subPosition;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    position = subPosition;\n    break;\n  }\n\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    }\n\n    // It is an unmatched quotation mark\n    return null;\n  }\n\n  if (string.length === position + 1) {\n    return null;\n  }\n\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/u);\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ?\n    string.length :\n    position + indexOfASCIIWhitespaceOrSemicolon + 1;\n\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\n\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js\n");

/***/ })

};
;