/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/canvas-sketch";
exports.ids = ["vendor-chunks/canvas-sketch"];
exports.modules = {

/***/ "(ssr)/./node_modules/canvas-sketch/dist/canvas-sketch.umd.js":
/*!**************************************************************!*\
  !*** ./node_modules/canvas-sketch/dist/canvas-sketch.umd.js ***!
  \**************************************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n\t true ? module.exports = factory() :\n\t0;\n}(this, (function () {\n\n\t/*\n\tobject-assign\n\t(c) Sindre Sorhus\n\t@license MIT\n\t*/\n\t/* eslint-disable no-unused-vars */\n\tvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\tvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n\tfunction toObject(val) {\n\t\tif (val === null || val === undefined) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\n\t\treturn Object(val);\n\t}\n\n\tfunction shouldUseNative() {\n\t\ttry {\n\t\t\tif (!Object.assign) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\t\ttest1[5] = 'de';\n\t\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\t\tvar test2 = {};\n\t\t\tfor (var i = 0; i < 10; i++) {\n\t\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t\t}\n\t\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\t\treturn test2[n];\n\t\t\t});\n\t\t\tif (order2.join('') !== '0123456789') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\t\tvar test3 = {};\n\t\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\t\ttest3[letter] = letter;\n\t\t\t});\n\t\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n\t\tvar from;\n\t\tvar to = toObject(target);\n\t\tvar symbols;\n\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = Object(arguments[s]);\n\n\t\t\tfor (var key in from) {\n\t\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\t\tto[key] = from[key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (getOwnPropertySymbols) {\n\t\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn to;\n\t};\n\n\tvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar browser =\n\t  commonjsGlobal.performance &&\n\t  commonjsGlobal.performance.now ? function now() {\n\t    return performance.now()\n\t  } : Date.now || function now() {\n\t    return +new Date\n\t  };\n\n\tvar isPromise_1 = isPromise;\n\n\tfunction isPromise(obj) {\n\t  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n\t}\n\n\tvar isDom = isNode;\n\n\tfunction isNode (val) {\n\t  return (!val || typeof val !== 'object')\n\t    ? false\n\t    : (typeof window === 'object' && typeof window.Node === 'object')\n\t      ? (val instanceof window.Node)\n\t      : (typeof val.nodeType === 'number') &&\n\t        (typeof val.nodeName === 'string')\n\t}\n\n\tfunction getClientAPI() {\n\t    return typeof window !== \"undefined\" && window[\"canvas-sketch-cli\"];\n\t}\n\n\tfunction defined() {\n\t    var arguments$1 = arguments;\n\n\t    for (var i = 0;i < arguments.length; i++) {\n\t        if (arguments$1[i] != null) {\n\t            return arguments$1[i];\n\t        }\n\t    }\n\t    return undefined;\n\t}\n\n\tfunction isBrowser() {\n\t    return typeof document !== \"undefined\";\n\t}\n\n\tfunction isWebGLContext(ctx) {\n\t    return ctx && typeof ctx.clear === \"function\" && typeof ctx.clearColor === \"function\" && typeof ctx.bufferData === \"function\";\n\t}\n\n\tfunction is2DContext(ctx) {\n\t    return ctx && typeof ctx.save === \"function\" && typeof ctx.scale === \"function\" && typeof ctx.restore === \"function\";\n\t}\n\n\tfunction isCanvas(element) {\n\t    return isDom(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === \"function\";\n\t}\n\n\tvar keys = createCommonjsModule(function (module, exports) {\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\t});\n\tvar keys_1 = keys.shim;\n\n\tvar is_arguments = createCommonjsModule(function (module, exports) {\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t}\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t}});\n\tvar is_arguments_1 = is_arguments.supported;\n\tvar is_arguments_2 = is_arguments.unsupported;\n\n\tvar deepEqual_1 = createCommonjsModule(function (module) {\n\tvar pSlice = Array.prototype.slice;\n\n\n\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t};\n\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (is_arguments(a)) {\n\t    if (!is_arguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = keys(a),\n\t        kb = keys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\t});\n\n\tvar dateformat = createCommonjsModule(function (module, exports) {\n\t/*\n\t * Date Format 1.2.3\n\t * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n\t * MIT license\n\t *\n\t * Includes enhancements by Scott Trenda <scott.trenda.net>\n\t * and Kris Kowal <cixar.com/~kris.kowal/>\n\t *\n\t * Accepts a date, a mask, or a date and a mask.\n\t * Returns a formatted version of the given date.\n\t * The date defaults to the current date/time.\n\t * The mask defaults to dateFormat.masks.default.\n\t */\n\n\t(function(global) {\n\n\t  var dateFormat = (function() {\n\t      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n\t      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n\t      var timezoneClip = /[^-+\\dA-Z]/g;\n\t  \n\t      // Regexes and supporting functions are cached through closure\n\t      return function (date, mask, utc, gmt) {\n\t  \n\t        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n\t        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n\t          mask = date;\n\t          date = undefined;\n\t        }\n\t  \n\t        date = date || new Date;\n\t  \n\t        if(!(date instanceof Date)) {\n\t          date = new Date(date);\n\t        }\n\t  \n\t        if (isNaN(date)) {\n\t          throw TypeError('Invalid date');\n\t        }\n\t  \n\t        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n\t  \n\t        // Allow setting the utc/gmt argument via the mask\n\t        var maskSlice = mask.slice(0, 4);\n\t        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n\t          mask = mask.slice(4);\n\t          utc = true;\n\t          if (maskSlice === 'GMT:') {\n\t            gmt = true;\n\t          }\n\t        }\n\t  \n\t        var _ = utc ? 'getUTC' : 'get';\n\t        var d = date[_ + 'Date']();\n\t        var D = date[_ + 'Day']();\n\t        var m = date[_ + 'Month']();\n\t        var y = date[_ + 'FullYear']();\n\t        var H = date[_ + 'Hours']();\n\t        var M = date[_ + 'Minutes']();\n\t        var s = date[_ + 'Seconds']();\n\t        var L = date[_ + 'Milliseconds']();\n\t        var o = utc ? 0 : date.getTimezoneOffset();\n\t        var W = getWeek(date);\n\t        var N = getDayOfWeek(date);\n\t        var flags = {\n\t          d:    d,\n\t          dd:   pad(d),\n\t          ddd:  dateFormat.i18n.dayNames[D],\n\t          dddd: dateFormat.i18n.dayNames[D + 7],\n\t          m:    m + 1,\n\t          mm:   pad(m + 1),\n\t          mmm:  dateFormat.i18n.monthNames[m],\n\t          mmmm: dateFormat.i18n.monthNames[m + 12],\n\t          yy:   String(y).slice(2),\n\t          yyyy: y,\n\t          h:    H % 12 || 12,\n\t          hh:   pad(H % 12 || 12),\n\t          H:    H,\n\t          HH:   pad(H),\n\t          M:    M,\n\t          MM:   pad(M),\n\t          s:    s,\n\t          ss:   pad(s),\n\t          l:    pad(L, 3),\n\t          L:    pad(Math.round(L / 10)),\n\t          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n\t          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n\t          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n\t          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n\t          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n\t          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n\t          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n\t          W:    W,\n\t          N:    N\n\t        };\n\t  \n\t        return mask.replace(token, function (match) {\n\t          if (match in flags) {\n\t            return flags[match];\n\t          }\n\t          return match.slice(1, match.length - 1);\n\t        });\n\t      };\n\t    })();\n\n\t  dateFormat.masks = {\n\t    'default':               'ddd mmm dd yyyy HH:MM:ss',\n\t    'shortDate':             'm/d/yy',\n\t    'mediumDate':            'mmm d, yyyy',\n\t    'longDate':              'mmmm d, yyyy',\n\t    'fullDate':              'dddd, mmmm d, yyyy',\n\t    'shortTime':             'h:MM TT',\n\t    'mediumTime':            'h:MM:ss TT',\n\t    'longTime':              'h:MM:ss TT Z',\n\t    'isoDate':               'yyyy-mm-dd',\n\t    'isoTime':               'HH:MM:ss',\n\t    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n\t    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n\t    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n\t  };\n\n\t  // Internationalization strings\n\t  dateFormat.i18n = {\n\t    dayNames: [\n\t      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n\t      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n\t    ],\n\t    monthNames: [\n\t      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n\t      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n\t    ],\n\t    timeNames: [\n\t      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n\t    ]\n\t  };\n\n\tfunction pad(val, len) {\n\t  val = String(val);\n\t  len = len || 2;\n\t  while (val.length < len) {\n\t    val = '0' + val;\n\t  }\n\t  return val;\n\t}\n\n\t/**\n\t * Get the ISO 8601 week number\n\t * Based on comments from\n\t * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n\t *\n\t * @param  {Object} `date`\n\t * @return {Number}\n\t */\n\tfunction getWeek(date) {\n\t  // Remove time components of date\n\t  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n\t  // Change date to Thursday same week\n\t  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n\t  // Take January 4th as it is always in week 1 (see ISO 8601)\n\t  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n\t  // Change date to Thursday same week\n\t  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n\t  // Check if daylight-saving-time-switch occurred and correct for it\n\t  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n\t  targetThursday.setHours(targetThursday.getHours() - ds);\n\n\t  // Number of weeks between target Thursday and first Thursday\n\t  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n\t  return 1 + Math.floor(weekDiff);\n\t}\n\n\t/**\n\t * Get ISO-8601 numeric representation of the day of the week\n\t * 1 (for Monday) through 7 (for Sunday)\n\t * \n\t * @param  {Object} `date`\n\t * @return {Number}\n\t */\n\tfunction getDayOfWeek(date) {\n\t  var dow = date.getDay();\n\t  if(dow === 0) {\n\t    dow = 7;\n\t  }\n\t  return dow;\n\t}\n\n\t/**\n\t * kind-of shortcut\n\t * @param  {*} val\n\t * @return {String}\n\t */\n\tfunction kindOf(val) {\n\t  if (val === null) {\n\t    return 'null';\n\t  }\n\n\t  if (val === undefined) {\n\t    return 'undefined';\n\t  }\n\n\t  if (typeof val !== 'object') {\n\t    return typeof val;\n\t  }\n\n\t  if (Array.isArray(val)) {\n\t    return 'array';\n\t  }\n\n\t  return {}.toString.call(val)\n\t    .slice(8, -1).toLowerCase();\n\t}\n\n\n\t  if (false) {} else {\n\t    module.exports = dateFormat;\n\t  }\n\t})(commonjsGlobal);\n\t});\n\n\t/*!\n\t * repeat-string <https://github.com/jonschlinkert/repeat-string>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\n\t/**\n\t * Results cache\n\t */\n\n\tvar res = '';\n\tvar cache;\n\n\t/**\n\t * Expose `repeat`\n\t */\n\n\tvar repeatString = repeat;\n\n\t/**\n\t * Repeat the given `string` the specified `number`\n\t * of times.\n\t *\n\t * **Example:**\n\t *\n\t * ```js\n\t * var repeat = require('repeat-string');\n\t * repeat('A', 5);\n\t * //=> AAAAA\n\t * ```\n\t *\n\t * @param {String} `string` The string to repeat\n\t * @param {Number} `number` The number of times to repeat the string\n\t * @return {String} Repeated string\n\t * @api public\n\t */\n\n\tfunction repeat(str, num) {\n\t  if (typeof str !== 'string') {\n\t    throw new TypeError('expected a string');\n\t  }\n\n\t  // cover common, quick use cases\n\t  if (num === 1) return str;\n\t  if (num === 2) return str + str;\n\n\t  var max = str.length * num;\n\t  if (cache !== str || typeof cache === 'undefined') {\n\t    cache = str;\n\t    res = '';\n\t  } else if (res.length >= max) {\n\t    return res.substr(0, max);\n\t  }\n\n\t  while (max > res.length && num > 1) {\n\t    if (num & 1) {\n\t      res += str;\n\t    }\n\n\t    num >>= 1;\n\t    str += str;\n\t  }\n\n\t  res += str;\n\t  res = res.substr(0, max);\n\t  return res;\n\t}\n\n\tvar padLeft = function padLeft(str, num, ch) {\n\t  str = str.toString();\n\n\t  if (typeof num === 'undefined') {\n\t    return str;\n\t  }\n\n\t  if (ch === 0) {\n\t    ch = '0';\n\t  } else if (ch) {\n\t    ch = ch.toString();\n\t  } else {\n\t    ch = ' ';\n\t  }\n\n\t  return repeatString(ch, num - str.length) + str;\n\t};\n\n\tvar noop = function () {};\n\tvar link;\n\tvar defaultExts = {\n\t    extension: '',\n\t    prefix: '',\n\t    suffix: ''\n\t};\n\tvar supportedEncodings = ['image/png','image/jpeg','image/webp'];\n\tfunction stream(isStart, opts) {\n\t    if ( opts === void 0 ) opts = {};\n\n\t    return new Promise(function (resolve, reject) {\n\t        opts = objectAssign({}, defaultExts, opts);\n\t        var filename = resolveFilename(Object.assign({}, opts, {\n\t            extension: '',\n\t            frame: undefined\n\t        }));\n\t        var func = isStart ? 'streamStart' : 'streamEnd';\n\t        var client = getClientAPI();\n\t        if (client && client.output && typeof client[func] === 'function') {\n\t            return client[func](objectAssign({}, opts, {\n\t                filename: filename\n\t            })).then(function (ev) { return resolve(ev); });\n\t        } else {\n\t            return resolve({\n\t                filename: filename,\n\t                client: false\n\t            });\n\t        }\n\t    });\n\t}\n\n\tfunction streamStart(opts) {\n\t    if ( opts === void 0 ) opts = {};\n\n\t    return stream(true, opts);\n\t}\n\n\tfunction streamEnd(opts) {\n\t    if ( opts === void 0 ) opts = {};\n\n\t    return stream(false, opts);\n\t}\n\n\tfunction exportCanvas(canvas, opt) {\n\t    if ( opt === void 0 ) opt = {};\n\n\t    var encoding = opt.encoding || 'image/png';\n\t    if (!supportedEncodings.includes(encoding)) \n\t        { throw new Error((\"Invalid canvas encoding \" + encoding)); }\n\t    var extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n\t    if (extension) \n\t        { extension = (\".\" + extension).toLowerCase(); }\n\t    return {\n\t        extension: extension,\n\t        type: encoding,\n\t        dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n\t    };\n\t}\n\n\tfunction createBlobFromDataURL(dataURL) {\n\t    return new Promise(function (resolve) {\n\t        var splitIndex = dataURL.indexOf(',');\n\t        if (splitIndex === -1) {\n\t            resolve(new window.Blob());\n\t            return;\n\t        }\n\t        var base64 = dataURL.slice(splitIndex + 1);\n\t        var byteString = window.atob(base64);\n\t        var type = dataURL.slice(0, splitIndex);\n\t        var mimeMatch = /data:([^;]+)/.exec(type);\n\t        var mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n\t        var ab = new ArrayBuffer(byteString.length);\n\t        var ia = new Uint8Array(ab);\n\t        for (var i = 0;i < byteString.length; i++) {\n\t            ia[i] = byteString.charCodeAt(i);\n\t        }\n\t        resolve(new window.Blob([ab], {\n\t            type: mime\n\t        }));\n\t    });\n\t}\n\n\tfunction saveDataURL(dataURL, opts) {\n\t    if ( opts === void 0 ) opts = {};\n\n\t    return createBlobFromDataURL(dataURL).then(function (blob) { return saveBlob(blob, opts); });\n\t}\n\n\tfunction saveBlob(blob, opts) {\n\t    if ( opts === void 0 ) opts = {};\n\n\t    return new Promise(function (resolve) {\n\t        opts = objectAssign({}, defaultExts, opts);\n\t        var filename = opts.filename;\n\t        var client = getClientAPI();\n\t        if (client && typeof client.saveBlob === 'function' && client.output) {\n\t            return client.saveBlob(blob, objectAssign({}, opts, {\n\t                filename: filename\n\t            })).then(function (ev) { return resolve(ev); });\n\t        } else {\n\t            if (!link) {\n\t                link = document.createElement('a');\n\t                link.style.visibility = 'hidden';\n\t                link.target = '_blank';\n\t            }\n\t            link.download = filename;\n\t            link.href = window.URL.createObjectURL(blob);\n\t            document.body.appendChild(link);\n\t            link.onclick = (function () {\n\t                link.onclick = noop;\n\t                setTimeout(function () {\n\t                    window.URL.revokeObjectURL(blob);\n\t                    if (link.parentElement) \n\t                        { link.parentElement.removeChild(link); }\n\t                    link.removeAttribute('href');\n\t                    resolve({\n\t                        filename: filename,\n\t                        client: false\n\t                    });\n\t                });\n\t            });\n\t            link.click();\n\t        }\n\t    });\n\t}\n\n\tfunction saveFile(data, opts) {\n\t    if ( opts === void 0 ) opts = {};\n\n\t    var parts = Array.isArray(data) ? data : [data];\n\t    var blob = new window.Blob(parts, {\n\t        type: opts.type || ''\n\t    });\n\t    return saveBlob(blob, opts);\n\t}\n\n\tfunction getTimeStamp() {\n\t    var dateFormatStr = \"yyyy.mm.dd-HH.MM.ss\";\n\t    return dateformat(new Date(), dateFormatStr);\n\t}\n\n\tfunction resolveFilename(opt) {\n\t    if ( opt === void 0 ) opt = {};\n\n\t    opt = objectAssign({}, opt);\n\t    if (typeof opt.file === 'function') {\n\t        return opt.file(opt);\n\t    } else if (opt.file) {\n\t        return opt.file;\n\t    }\n\t    var frame = null;\n\t    var extension = '';\n\t    if (typeof opt.extension === 'string') \n\t        { extension = opt.extension; }\n\t    if (typeof opt.frame === 'number') {\n\t        var totalFrames;\n\t        if (typeof opt.totalFrames === 'number') {\n\t            totalFrames = opt.totalFrames;\n\t        } else {\n\t            totalFrames = Math.max(10000, opt.frame);\n\t        }\n\t        frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n\t    }\n\t    var layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? (\"\" + (opt.layer)) : '';\n\t    if (frame != null) {\n\t        return [layerStr,frame].filter(Boolean).join('-') + extension;\n\t    } else {\n\t        var defaultFileName = opt.timeStamp;\n\t        return [opt.prefix,opt.name || defaultFileName,layerStr,opt.hash,opt.suffix].filter(Boolean).join('-') + extension;\n\t    }\n\t}\n\n\tvar commonTypos = {\n\t    dimension: 'dimensions',\n\t    animated: 'animate',\n\t    animating: 'animate',\n\t    unit: 'units',\n\t    P5: 'p5',\n\t    pixellated: 'pixelated',\n\t    looping: 'loop',\n\t    pixelPerInch: 'pixels'\n\t};\n\tvar allKeys = ['dimensions','units','pixelsPerInch','orientation','scaleToFit',\n\t    'scaleToView','bleed','pixelRatio','exportPixelRatio','maxPixelRatio','scaleContext',\n\t    'resizeCanvas','styleCanvas','canvas','context','attributes','parent','file',\n\t    'name','prefix','suffix','animate','playing','loop','duration','totalFrames',\n\t    'fps','playbackRate','timeScale','frame','time','flush','pixelated','hotkeys',\n\t    'p5','id','scaleToFitPadding','data','params','encoding','encodingQuality'];\n\tvar checkSettings = function (settings) {\n\t    var keys = Object.keys(settings);\n\t    keys.forEach(function (key) {\n\t        if (key in commonTypos) {\n\t            var actual = commonTypos[key];\n\t            console.warn((\"[canvas-sketch] Could not recognize the setting \\\"\" + key + \"\\\", did you mean \\\"\" + actual + \"\\\"?\"));\n\t        } else if (!allKeys.includes(key)) {\n\t            console.warn((\"[canvas-sketch] Could not recognize the setting \\\"\" + key + \"\\\"\"));\n\t        }\n\t    });\n\t};\n\n\tfunction keyboardShortcuts (opt) {\n\t    if ( opt === void 0 ) opt = {};\n\n\t    var handler = function (ev) {\n\t        if (!opt.enabled()) \n\t            { return; }\n\t        var client = getClientAPI();\n\t        if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n\t            ev.preventDefault();\n\t            opt.save(ev);\n\t        } else if (ev.keyCode === 32) {\n\t            opt.togglePlay(ev);\n\t        } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n\t            ev.preventDefault();\n\t            opt.commit(ev);\n\t        }\n\t    };\n\t    var attach = function () {\n\t        window.addEventListener('keydown', handler);\n\t    };\n\t    var detach = function () {\n\t        window.removeEventListener('keydown', handler);\n\t    };\n\t    return {\n\t        attach: attach,\n\t        detach: detach\n\t    };\n\t}\n\n\tvar defaultUnits = 'mm';\n\tvar data = [['postcard',101.6,152.4],['poster-small',280,430],['poster',460,610],\n\t    ['poster-large',610,910],['business-card',50.8,88.9],['2r',64,89],['3r',89,127],\n\t    ['4r',102,152],['5r',127,178],['6r',152,203],['8r',203,254],['10r',254,305],['11r',\n\t    279,356],['12r',305,381],['a0',841,1189],['a1',594,841],['a2',420,594],['a3',\n\t    297,420],['a4',210,297],['a5',148,210],['a6',105,148],['a7',74,105],['a8',52,\n\t    74],['a9',37,52],['a10',26,37],['2a0',1189,1682],['4a0',1682,2378],['b0',1000,\n\t    1414],['b1',707,1000],['b1+',720,1020],['b2',500,707],['b2+',520,720],['b3',353,\n\t    500],['b4',250,353],['b5',176,250],['b6',125,176],['b7',88,125],['b8',62,88],\n\t    ['b9',44,62],['b10',31,44],['b11',22,32],['b12',16,22],['c0',917,1297],['c1',\n\t    648,917],['c2',458,648],['c3',324,458],['c4',229,324],['c5',162,229],['c6',114,\n\t    162],['c7',81,114],['c8',57,81],['c9',40,57],['c10',28,40],['c11',22,32],['c12',\n\t    16,22],['half-letter',5.5,8.5,'in'],['letter',8.5,11,'in'],['legal',8.5,14,'in'],\n\t    ['junior-legal',5,8,'in'],['ledger',11,17,'in'],['tabloid',11,17,'in'],['ansi-a',\n\t    8.5,11.0,'in'],['ansi-b',11.0,17.0,'in'],['ansi-c',17.0,22.0,'in'],['ansi-d',\n\t    22.0,34.0,'in'],['ansi-e',34.0,44.0,'in'],['arch-a',9,12,'in'],['arch-b',12,18,\n\t    'in'],['arch-c',18,24,'in'],['arch-d',24,36,'in'],['arch-e',36,48,'in'],['arch-e1',\n\t    30,42,'in'],['arch-e2',26,38,'in'],['arch-e3',27,39,'in']];\n\tvar paperSizes = data.reduce(function (dict, preset) {\n\t    var item = {\n\t        units: preset[3] || defaultUnits,\n\t        dimensions: [preset[1],preset[2]]\n\t    };\n\t    dict[preset[0]] = item;\n\t    dict[preset[0].replace(/-/g, ' ')] = item;\n\t    return dict;\n\t}, {})\n\n\tvar defined$1 = function () {\n\t    for (var i = 0; i < arguments.length; i++) {\n\t        if (arguments[i] !== undefined) return arguments[i];\n\t    }\n\t};\n\n\tvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\n\tvar conversions = {\n\t  // metric\n\t  m: {\n\t    system: 'metric',\n\t    factor: 1\n\t  },\n\t  cm: {\n\t    system: 'metric',\n\t    factor: 1 / 100\n\t  },\n\t  mm: {\n\t    system: 'metric',\n\t    factor: 1 / 1000\n\t  },\n\t  // imperial\n\t  pt: {\n\t    system: 'imperial',\n\t    factor: 1 / 72\n\t  },\n\t  pc: {\n\t    system: 'imperial',\n\t    factor: 1 / 6\n\t  },\n\t  in: {\n\t    system: 'imperial',\n\t    factor: 1\n\t  },\n\t  ft: {\n\t    system: 'imperial',\n\t    factor: 12\n\t  }\n\t};\n\n\tconst anchors = {\n\t  metric: {\n\t    unit: 'm',\n\t    ratio: 1 / 0.0254\n\t  },\n\t  imperial: {\n\t    unit: 'in',\n\t    ratio: 0.0254\n\t  }\n\t};\n\n\tfunction round (value, decimals) {\n\t  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n\t}\n\n\tfunction convertDistance (value, fromUnit, toUnit, opts) {\n\t  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n\t  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n\t  opts = opts || {};\n\t  var pixelsPerInch = defined$1(opts.pixelsPerInch, 96);\n\t  var precision = opts.precision;\n\t  var roundPixel = opts.roundPixel !== false;\n\n\t  fromUnit = fromUnit.toLowerCase();\n\t  toUnit = toUnit.toLowerCase();\n\n\t  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n\t  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n\t  if (fromUnit === toUnit) {\n\t    // We don't need to convert from A to B since they are the same already\n\t    return value;\n\t  }\n\n\t  var toFactor = 1;\n\t  var fromFactor = 1;\n\t  var isToPixel = false;\n\n\t  if (fromUnit === 'px') {\n\t    fromFactor = 1 / pixelsPerInch;\n\t    fromUnit = 'in';\n\t  }\n\t  if (toUnit === 'px') {\n\t    isToPixel = true;\n\t    toFactor = pixelsPerInch;\n\t    toUnit = 'in';\n\t  }\n\n\t  var fromUnitData = conversions[fromUnit];\n\t  var toUnitData = conversions[toUnit];\n\n\t  // source to anchor inside source's system\n\t  var anchor = value * fromUnitData.factor * fromFactor;\n\n\t  // if systems differ, convert one to another\n\t  if (fromUnitData.system !== toUnitData.system) {\n\t    // regular 'm' to 'in' and so forth\n\t    anchor *= anchors[fromUnitData.system].ratio;\n\t  }\n\n\t  var result = anchor / toUnitData.factor * toFactor;\n\t  if (isToPixel && roundPixel) {\n\t    result = Math.round(result);\n\t  } else if (typeof precision === 'number' && isFinite(precision)) {\n\t    result = round(result, precision);\n\t  }\n\t  return result;\n\t}\n\n\tvar convertLength = convertDistance;\n\tvar units_1 = units;\n\tconvertLength.units = units_1;\n\n\tfunction getDimensionsFromPreset(dimensions, unitsTo, pixelsPerInch) {\n\t    if ( unitsTo === void 0 ) unitsTo = 'px';\n\t    if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;\n\n\t    if (typeof dimensions === 'string') {\n\t        var key = dimensions.toLowerCase();\n\t        if (!(key in paperSizes)) {\n\t            throw new Error((\"The dimension preset \\\"\" + dimensions + \"\\\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.\"));\n\t        }\n\t        var preset = paperSizes[key];\n\t        return preset.dimensions.map(function (d) { return convertDistance$1(d, preset.units, unitsTo, pixelsPerInch); });\n\t    } else {\n\t        return dimensions;\n\t    }\n\t}\n\n\tfunction convertDistance$1(dimension, unitsFrom, unitsTo, pixelsPerInch) {\n\t    if ( unitsFrom === void 0 ) unitsFrom = 'px';\n\t    if ( unitsTo === void 0 ) unitsTo = 'px';\n\t    if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;\n\n\t    return convertLength(dimension, unitsFrom, unitsTo, {\n\t        pixelsPerInch: pixelsPerInch,\n\t        precision: 4,\n\t        roundPixel: true\n\t    });\n\t}\n\n\tfunction checkIfHasDimensions(settings) {\n\t    if (!settings.dimensions) \n\t        { return false; }\n\t    if (typeof settings.dimensions === 'string') \n\t        { return true; }\n\t    if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) \n\t        { return true; }\n\t    return false;\n\t}\n\n\tfunction getParentSize(props, settings) {\n\t    if (!isBrowser()) {\n\t        return [300,150];\n\t    }\n\t    var element = settings.parent || window;\n\t    if (element === window || element === document || element === document.body) {\n\t        return [window.innerWidth,window.innerHeight];\n\t    } else {\n\t        var ref = element.getBoundingClientRect();\n\t        var width = ref.width;\n\t        var height = ref.height;\n\t        return [width,height];\n\t    }\n\t}\n\n\tfunction resizeCanvas(props, settings) {\n\t    var width, height;\n\t    var styleWidth, styleHeight;\n\t    var canvasWidth, canvasHeight;\n\t    var browser = isBrowser();\n\t    var dimensions = settings.dimensions;\n\t    var hasDimensions = checkIfHasDimensions(settings);\n\t    var exporting = props.exporting;\n\t    var scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n\t    var scaleToView = !exporting && hasDimensions ? settings.scaleToView : true;\n\t    if (!browser) \n\t        { scaleToFit = (scaleToView = false); }\n\t    var units = settings.units;\n\t    var pixelsPerInch = typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch) ? settings.pixelsPerInch : 72;\n\t    var bleed = defined(settings.bleed, 0);\n\t    var devicePixelRatio = browser ? window.devicePixelRatio : 1;\n\t    var basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\t    var pixelRatio, exportPixelRatio;\n\t    if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n\t        pixelRatio = settings.pixelRatio;\n\t        exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n\t    } else {\n\t        if (hasDimensions) {\n\t            pixelRatio = basePixelRatio;\n\t            exportPixelRatio = defined(settings.exportPixelRatio, 1);\n\t        } else {\n\t            pixelRatio = devicePixelRatio;\n\t            exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n\t        }\n\t    }\n\t    if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n\t        pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n\t    }\n\t    if (exporting) {\n\t        pixelRatio = exportPixelRatio;\n\t    }\n\t    var ref = getParentSize(props, settings);\n\t    var parentWidth = ref[0];\n\t    var parentHeight = ref[1];\n\t    var trimWidth, trimHeight;\n\t    if (hasDimensions) {\n\t        var result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n\t        var highest = Math.max(result[0], result[1]);\n\t        var lowest = Math.min(result[0], result[1]);\n\t        if (settings.orientation) {\n\t            var landscape = settings.orientation === 'landscape';\n\t            width = landscape ? highest : lowest;\n\t            height = landscape ? lowest : highest;\n\t        } else {\n\t            width = result[0];\n\t            height = result[1];\n\t        }\n\t        trimWidth = width;\n\t        trimHeight = height;\n\t        width += bleed * 2;\n\t        height += bleed * 2;\n\t    } else {\n\t        width = parentWidth;\n\t        height = parentHeight;\n\t        trimWidth = width;\n\t        trimHeight = height;\n\t    }\n\t    var realWidth = width;\n\t    var realHeight = height;\n\t    if (hasDimensions && units) {\n\t        realWidth = convertDistance$1(width, units, 'px', pixelsPerInch);\n\t        realHeight = convertDistance$1(height, units, 'px', pixelsPerInch);\n\t    }\n\t    styleWidth = Math.round(realWidth);\n\t    styleHeight = Math.round(realHeight);\n\t    if (scaleToFit && !exporting && hasDimensions) {\n\t        var aspect = width / height;\n\t        var windowAspect = parentWidth / parentHeight;\n\t        var scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n\t        var maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n\t        var maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n\t        if (styleWidth > maxWidth || styleHeight > maxHeight) {\n\t            if (windowAspect > aspect) {\n\t                styleHeight = maxHeight;\n\t                styleWidth = Math.round(styleHeight * aspect);\n\t            } else {\n\t                styleWidth = maxWidth;\n\t                styleHeight = Math.round(styleWidth / aspect);\n\t            }\n\t        }\n\t    }\n\t    canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n\t    canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\t    var viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n\t    var viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\t    var scaleX = canvasWidth / width;\n\t    var scaleY = canvasHeight / height;\n\t    return {\n\t        bleed: bleed,\n\t        pixelRatio: pixelRatio,\n\t        width: width,\n\t        height: height,\n\t        dimensions: [width,height],\n\t        units: units || 'px',\n\t        scaleX: scaleX,\n\t        scaleY: scaleY,\n\t        pixelsPerInch: pixelsPerInch,\n\t        viewportWidth: viewportWidth,\n\t        viewportHeight: viewportHeight,\n\t        canvasWidth: canvasWidth,\n\t        canvasHeight: canvasHeight,\n\t        trimWidth: trimWidth,\n\t        trimHeight: trimHeight,\n\t        styleWidth: styleWidth,\n\t        styleHeight: styleHeight\n\t    };\n\t}\n\n\tvar getCanvasContext_1 = getCanvasContext;\n\tfunction getCanvasContext (type, opts) {\n\t  if (typeof type !== 'string') {\n\t    throw new TypeError('must specify type string')\n\t  }\n\n\t  opts = opts || {};\n\n\t  if (typeof document === 'undefined' && !opts.canvas) {\n\t    return null // check for Node\n\t  }\n\n\t  var canvas = opts.canvas || document.createElement('canvas');\n\t  if (typeof opts.width === 'number') {\n\t    canvas.width = opts.width;\n\t  }\n\t  if (typeof opts.height === 'number') {\n\t    canvas.height = opts.height;\n\t  }\n\n\t  var attribs = opts;\n\t  var gl;\n\t  try {\n\t    var names = [ type ];\n\t    // prefix GL contexts\n\t    if (type.indexOf('webgl') === 0) {\n\t      names.push('experimental-' + type);\n\t    }\n\n\t    for (var i = 0; i < names.length; i++) {\n\t      gl = canvas.getContext(names[i], attribs);\n\t      if (gl) return gl\n\t    }\n\t  } catch (e) {\n\t    gl = null;\n\t  }\n\t  return (gl || null) // ensure null on fail\n\t}\n\n\tfunction createCanvasElement() {\n\t    if (!isBrowser()) {\n\t        throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n\t    }\n\t    return document.createElement('canvas');\n\t}\n\n\tfunction createCanvas(settings) {\n\t    if ( settings === void 0 ) settings = {};\n\n\t    var context, canvas;\n\t    var ownsCanvas = false;\n\t    if (settings.canvas !== false) {\n\t        context = settings.context;\n\t        if (!context || typeof context === 'string') {\n\t            var newCanvas = settings.canvas;\n\t            if (!newCanvas) {\n\t                newCanvas = createCanvasElement();\n\t                ownsCanvas = true;\n\t            }\n\t            var type = context || '2d';\n\t            if (typeof newCanvas.getContext !== 'function') {\n\t                throw new Error(\"The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?\");\n\t            }\n\t            context = getCanvasContext_1(type, objectAssign({}, settings.attributes, {\n\t                canvas: newCanvas\n\t            }));\n\t            if (!context) {\n\t                throw new Error((\"Failed at canvas.getContext('\" + type + \"') - the browser may not support this context, or a different context may already be in use with this canvas.\"));\n\t            }\n\t        }\n\t        canvas = context.canvas;\n\t        if (settings.canvas && canvas !== settings.canvas) {\n\t            throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n\t        }\n\t        if (settings.pixelated) {\n\t            context.imageSmoothingEnabled = false;\n\t            context.mozImageSmoothingEnabled = false;\n\t            context.oImageSmoothingEnabled = false;\n\t            context.webkitImageSmoothingEnabled = false;\n\t            context.msImageSmoothingEnabled = false;\n\t            canvas.style['image-rendering'] = 'pixelated';\n\t        }\n\t    }\n\t    return {\n\t        canvas: canvas,\n\t        context: context,\n\t        ownsCanvas: ownsCanvas\n\t    };\n\t}\n\n\tvar SketchManager = function SketchManager() {\n\t    var this$1 = this;\n\n\t    this._settings = {};\n\t    this._props = {};\n\t    this._sketch = undefined;\n\t    this._raf = null;\n\t    this._recordTimeout = null;\n\t    this._lastRedrawResult = undefined;\n\t    this._isP5Resizing = false;\n\t    this._keyboardShortcuts = keyboardShortcuts({\n\t        enabled: function () { return this$1.settings.hotkeys !== false; },\n\t        save: function (ev) {\n\t            if (ev.shiftKey) {\n\t                if (this$1.props.recording) {\n\t                    this$1.endRecord();\n\t                    this$1.run();\n\t                } else \n\t                    { this$1.record(); }\n\t            } else if (!this$1.props.recording) {\n\t                this$1.exportFrame();\n\t            }\n\t        },\n\t        togglePlay: function () {\n\t            if (this$1.props.playing) \n\t                { this$1.pause(); }\n\t             else \n\t                { this$1.play(); }\n\t        },\n\t        commit: function (ev) {\n\t            this$1.exportFrame({\n\t                commit: true\n\t            });\n\t        }\n\t    });\n\t    this._animateHandler = (function () { return this$1.animate(); });\n\t    this._resizeHandler = (function () {\n\t        var changed = this$1.resize();\n\t        if (changed) {\n\t            this$1.render();\n\t        }\n\t    });\n\t};\n\n\tvar prototypeAccessors = { sketch: { configurable: true },settings: { configurable: true },props: { configurable: true } };\n\tprototypeAccessors.sketch.get = function () {\n\t    return this._sketch;\n\t};\n\tprototypeAccessors.settings.get = function () {\n\t    return this._settings;\n\t};\n\tprototypeAccessors.props.get = function () {\n\t    return this._props;\n\t};\n\tSketchManager.prototype._computePlayhead = function _computePlayhead (currentTime, duration) {\n\t    var hasDuration = typeof duration === \"number\" && isFinite(duration);\n\t    return hasDuration ? currentTime / duration : 0;\n\t};\n\tSketchManager.prototype._computeFrame = function _computeFrame (playhead, time, totalFrames, fps) {\n\t    return isFinite(totalFrames) && totalFrames > 1 ? Math.floor(playhead * (totalFrames - 1)) : Math.floor(fps * time);\n\t};\n\tSketchManager.prototype._computeCurrentFrame = function _computeCurrentFrame () {\n\t    return this._computeFrame(this.props.playhead, this.props.time, this.props.totalFrames, this.props.fps);\n\t};\n\tSketchManager.prototype._getSizeProps = function _getSizeProps () {\n\t    var props = this.props;\n\t    return {\n\t        width: props.width,\n\t        height: props.height,\n\t        pixelRatio: props.pixelRatio,\n\t        canvasWidth: props.canvasWidth,\n\t        canvasHeight: props.canvasHeight,\n\t        viewportWidth: props.viewportWidth,\n\t        viewportHeight: props.viewportHeight\n\t    };\n\t};\n\tSketchManager.prototype.run = function run () {\n\t    if (!this.sketch) \n\t        { throw new Error(\"should wait until sketch is loaded before trying to play()\"); }\n\t    if (this.settings.playing !== false) {\n\t        this.play();\n\t    }\n\t    if (typeof this.sketch.dispose === \"function\") {\n\t        console.warn(\"In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()\");\n\t    }\n\t    if (!this.props.started) {\n\t        this._signalBegin();\n\t        this.props.started = true;\n\t    }\n\t    this.tick();\n\t    this.render();\n\t    return this;\n\t};\n\tSketchManager.prototype._cancelTimeouts = function _cancelTimeouts () {\n\t    if (this._raf != null && typeof window !== \"undefined\" && typeof window.cancelAnimationFrame === \"function\") {\n\t        window.cancelAnimationFrame(this._raf);\n\t        this._raf = null;\n\t    }\n\t    if (this._recordTimeout != null) {\n\t        clearTimeout(this._recordTimeout);\n\t        this._recordTimeout = null;\n\t    }\n\t};\n\tSketchManager.prototype.play = function play () {\n\t    var animate = this.settings.animate;\n\t    if (\"animation\" in this.settings) {\n\t        animate = true;\n\t        console.warn(\"[canvas-sketch] { animation } has been renamed to { animate }\");\n\t    }\n\t    if (!animate) \n\t        { return; }\n\t    if (!isBrowser()) {\n\t        console.error(\"[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported\");\n\t        return;\n\t    }\n\t    if (this.props.playing) \n\t        { return; }\n\t    if (!this.props.started) {\n\t        this._signalBegin();\n\t        this.props.started = true;\n\t    }\n\t    this.props.playing = true;\n\t    this._cancelTimeouts();\n\t    this._lastTime = browser();\n\t    this._raf = window.requestAnimationFrame(this._animateHandler);\n\t};\n\tSketchManager.prototype.pause = function pause () {\n\t    if (this.props.recording) \n\t        { this.endRecord(); }\n\t    this.props.playing = false;\n\t    this._cancelTimeouts();\n\t};\n\tSketchManager.prototype.togglePlay = function togglePlay () {\n\t    if (this.props.playing) \n\t        { this.pause(); }\n\t     else \n\t        { this.play(); }\n\t};\n\tSketchManager.prototype.stop = function stop () {\n\t    this.pause();\n\t    this.props.frame = 0;\n\t    this.props.playhead = 0;\n\t    this.props.time = 0;\n\t    this.props.deltaTime = 0;\n\t    this.props.started = false;\n\t    this.render();\n\t};\n\tSketchManager.prototype.record = function record () {\n\t        var this$1 = this;\n\n\t    if (this.props.recording) \n\t        { return; }\n\t    if (!isBrowser()) {\n\t        console.error(\"[canvas-sketch] WARN: Recording from Node.js is not yet supported\");\n\t        return;\n\t    }\n\t    this.stop();\n\t    this.props.playing = true;\n\t    this.props.recording = true;\n\t    var exportOpts = this._createExportOptions({\n\t        sequence: true\n\t    });\n\t    var frameInterval = 1 / this.props.fps;\n\t    this._cancelTimeouts();\n\t    var tick = function () {\n\t        if (!this$1.props.recording) \n\t            { return Promise.resolve(); }\n\t        this$1.props.deltaTime = frameInterval;\n\t        this$1.tick();\n\t        return this$1.exportFrame(exportOpts).then(function () {\n\t            if (!this$1.props.recording) \n\t                { return; }\n\t            this$1.props.deltaTime = 0;\n\t            this$1.props.frame++;\n\t            if (this$1.props.frame < this$1.props.totalFrames) {\n\t                this$1.props.time += frameInterval;\n\t                this$1.props.playhead = this$1._computePlayhead(this$1.props.time, this$1.props.duration);\n\t                this$1._recordTimeout = setTimeout(tick, 0);\n\t            } else {\n\t                console.log(\"Finished recording\");\n\t                this$1._signalEnd();\n\t                this$1.endRecord();\n\t                this$1.stop();\n\t                this$1.run();\n\t            }\n\t        });\n\t    };\n\t    if (!this.props.started) {\n\t        this._signalBegin();\n\t        this.props.started = true;\n\t    }\n\t    if (this.sketch && typeof this.sketch.beginRecord === \"function\") {\n\t        this._wrapContextScale(function (props) { return this$1.sketch.beginRecord(props); });\n\t    }\n\t    streamStart(exportOpts).catch(function (err) {\n\t        console.error(err);\n\t    }).then(function (response) {\n\t        this$1._raf = window.requestAnimationFrame(tick);\n\t    });\n\t};\n\tSketchManager.prototype._signalBegin = function _signalBegin () {\n\t        var this$1 = this;\n\n\t    if (this.sketch && typeof this.sketch.begin === \"function\") {\n\t        this._wrapContextScale(function (props) { return this$1.sketch.begin(props); });\n\t    }\n\t};\n\tSketchManager.prototype._signalEnd = function _signalEnd () {\n\t        var this$1 = this;\n\n\t    if (this.sketch && typeof this.sketch.end === \"function\") {\n\t        this._wrapContextScale(function (props) { return this$1.sketch.end(props); });\n\t    }\n\t};\n\tSketchManager.prototype.endRecord = function endRecord () {\n\t        var this$1 = this;\n\n\t    var wasRecording = this.props.recording;\n\t    this._cancelTimeouts();\n\t    this.props.recording = false;\n\t    this.props.deltaTime = 0;\n\t    this.props.playing = false;\n\t    return streamEnd().catch(function (err) {\n\t        console.error(err);\n\t    }).then(function () {\n\t        if (wasRecording && this$1.sketch && typeof this$1.sketch.endRecord === \"function\") {\n\t            this$1._wrapContextScale(function (props) { return this$1.sketch.endRecord(props); });\n\t        }\n\t    });\n\t};\n\tSketchManager.prototype._createExportOptions = function _createExportOptions (opt) {\n\t        if ( opt === void 0 ) opt = {};\n\n\t    return {\n\t        sequence: opt.sequence,\n\t        save: opt.save,\n\t        fps: this.props.fps,\n\t        frame: opt.sequence ? this.props.frame : undefined,\n\t        file: this.settings.file,\n\t        name: this.settings.name,\n\t        prefix: this.settings.prefix,\n\t        suffix: this.settings.suffix,\n\t        encoding: this.settings.encoding,\n\t        encodingQuality: this.settings.encodingQuality,\n\t        timeStamp: opt.timeStamp || getTimeStamp(),\n\t        totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n\t    };\n\t};\n\tSketchManager.prototype.exportFrame = function exportFrame (opt) {\n\t        var this$1 = this;\n\t        if ( opt === void 0 ) opt = {};\n\n\t    if (!this.sketch) \n\t        { return Promise.all([]); }\n\t    if (typeof this.sketch.preExport === \"function\") {\n\t        this.sketch.preExport();\n\t    }\n\t    var exportOpts = this._createExportOptions(opt);\n\t    var client = getClientAPI();\n\t    var p = Promise.resolve();\n\t    if (client && opt.commit && typeof client.commit === \"function\") {\n\t        var commitOpts = objectAssign({}, exportOpts);\n\t        var hash = client.commit(commitOpts);\n\t        if (isPromise_1(hash)) \n\t            { p = hash; }\n\t         else \n\t            { p = Promise.resolve(hash); }\n\t    }\n\t    return p.then(function (hash) { return this$1._doExportFrame(objectAssign({}, exportOpts, {\n\t        hash: hash || \"\"\n\t    })); }).then(function (result) {\n\t        if (result.length === 1) \n\t            { return result[0]; }\n\t         else \n\t            { return result; }\n\t    });\n\t};\n\tSketchManager.prototype._doExportFrame = function _doExportFrame (exportOpts) {\n\t        var this$1 = this;\n\t        if ( exportOpts === void 0 ) exportOpts = {};\n\n\t    this._props.exporting = true;\n\t    this.resize();\n\t    var drawResult = this.render();\n\t    var canvas = this.props.canvas;\n\t    if (typeof drawResult === \"undefined\") {\n\t        drawResult = [canvas];\n\t    }\n\t    drawResult = [].concat(drawResult).filter(Boolean);\n\t    drawResult = drawResult.map(function (result) {\n\t        var hasDataObject = typeof result === \"object\" && result && (\"data\" in result || \"dataURL\" in result);\n\t        var data = hasDataObject ? result.data : result;\n\t        var opts = hasDataObject ? objectAssign({}, result, {\n\t            data: data\n\t        }) : {\n\t            data: data\n\t        };\n\t        if (isCanvas(data)) {\n\t            var encoding = opts.encoding || exportOpts.encoding;\n\t            var encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n\t            var ref = exportCanvas(data, {\n\t                encoding: encoding,\n\t                encodingQuality: encodingQuality\n\t            });\n\t                var dataURL = ref.dataURL;\n\t                var extension = ref.extension;\n\t                var type = ref.type;\n\t            return Object.assign(opts, {\n\t                dataURL: dataURL,\n\t                extension: extension,\n\t                type: type\n\t            });\n\t        } else {\n\t            return opts;\n\t        }\n\t    });\n\t    this._props.exporting = false;\n\t    this.resize();\n\t    this.render();\n\t    return Promise.all(drawResult.map(function (result, i, layerList) {\n\t        var curOpt = objectAssign({\n\t            extension: \"\",\n\t            prefix: \"\",\n\t            suffix: \"\"\n\t        }, exportOpts, result, {\n\t            layer: i,\n\t            totalLayers: layerList.length\n\t        });\n\t        var saveParam = exportOpts.save === false ? false : result.save;\n\t        curOpt.save = saveParam !== false;\n\t        curOpt.filename = resolveFilename(curOpt);\n\t        delete curOpt.encoding;\n\t        delete curOpt.encodingQuality;\n\t        for (var k in curOpt) {\n\t            if (typeof curOpt[k] === \"undefined\") \n\t                { delete curOpt[k]; }\n\t        }\n\t        var savePromise = Promise.resolve({});\n\t        if (curOpt.save) {\n\t            var data = curOpt.data;\n\t            if (curOpt.dataURL) {\n\t                var dataURL = curOpt.dataURL;\n\t                savePromise = saveDataURL(dataURL, curOpt);\n\t            } else {\n\t                savePromise = saveFile(data, curOpt);\n\t            }\n\t        }\n\t        return savePromise.then(function (saveResult) { return Object.assign({}, curOpt, saveResult); });\n\t    })).then(function (ev) {\n\t        var savedEvents = ev.filter(function (e) { return e.save; });\n\t        if (savedEvents.length > 0) {\n\t            var eventWithOutput = savedEvents.find(function (e) { return e.outputName; });\n\t            var isClient = savedEvents.some(function (e) { return e.client; });\n\t            var isStreaming = savedEvents.some(function (e) { return e.stream; });\n\t            var item;\n\t            if (savedEvents.length > 1) \n\t                { item = savedEvents.length; }\n\t             else if (eventWithOutput) \n\t                { item = (eventWithOutput.outputName) + \"/\" + (savedEvents[0].filename); }\n\t             else \n\t                { item = \"\" + (savedEvents[0].filename); }\n\t            var ofSeq = \"\";\n\t            if (exportOpts.sequence) {\n\t                var hasTotalFrames = isFinite(this$1.props.totalFrames);\n\t                ofSeq = hasTotalFrames ? (\" (frame \" + (exportOpts.frame + 1) + \" / \" + (this$1.props.totalFrames) + \")\") : (\" (frame \" + (exportOpts.frame) + \")\");\n\t            } else if (savedEvents.length > 1) {\n\t                ofSeq = \" files\";\n\t            }\n\t            var client = isClient ? \"canvas-sketch-cli\" : \"canvas-sketch\";\n\t            var action = isStreaming ? \"Streaming into\" : \"Exported\";\n\t            console.log((\"%c[\" + client + \"]%c \" + action + \" %c\" + item + \"%c\" + ofSeq), \"color: #8e8e8e;\", \"color: initial;\", \"font-weight: bold;\", \"font-weight: initial;\");\n\t        }\n\t        if (typeof this$1.sketch.postExport === \"function\") {\n\t            this$1.sketch.postExport();\n\t        }\n\t        return ev;\n\t    });\n\t};\n\tSketchManager.prototype._wrapContextScale = function _wrapContextScale (cb) {\n\t    this._preRender();\n\t    cb(this.props);\n\t    this._postRender();\n\t};\n\tSketchManager.prototype._preRender = function _preRender () {\n\t    var props = this.props;\n\t    if (is2DContext(props.context) && !props.p5) {\n\t        props.context.save();\n\t        if (this.settings.scaleContext !== false) {\n\t            props.context.scale(props.scaleX, props.scaleY);\n\t        }\n\t    } else if (props.p5) {\n\t        props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n\t    }\n\t};\n\tSketchManager.prototype._postRender = function _postRender () {\n\t    var props = this.props;\n\t    if (is2DContext(props.context) && !props.p5) {\n\t        props.context.restore();\n\t    }\n\t    if (props.gl && this.settings.flush !== false && !props.p5) {\n\t        props.gl.flush();\n\t    }\n\t};\n\tSketchManager.prototype.tick = function tick () {\n\t    if (this.sketch && typeof this.sketch.tick === \"function\") {\n\t        this._preRender();\n\t        this.sketch.tick(this.props);\n\t        this._postRender();\n\t    }\n\t};\n\tSketchManager.prototype.render = function render () {\n\t    if (this.props.p5) {\n\t        this._lastRedrawResult = undefined;\n\t        this.props.p5.redraw();\n\t        return this._lastRedrawResult;\n\t    } else {\n\t        return this.submitDrawCall();\n\t    }\n\t};\n\tSketchManager.prototype.submitDrawCall = function submitDrawCall () {\n\t    if (!this.sketch) \n\t        { return; }\n\t    var props = this.props;\n\t    this._preRender();\n\t    var drawResult;\n\t    if (typeof this.sketch === \"function\") {\n\t        drawResult = this.sketch(props);\n\t    } else if (typeof this.sketch.render === \"function\") {\n\t        drawResult = this.sketch.render(props);\n\t    }\n\t    this._postRender();\n\t    return drawResult;\n\t};\n\tSketchManager.prototype.update = function update (opt) {\n\t        var this$1 = this;\n\t        if ( opt === void 0 ) opt = {};\n\n\t    var notYetSupported = [\"animate\"];\n\t    Object.keys(opt).forEach(function (key) {\n\t        if (notYetSupported.indexOf(key) >= 0) {\n\t            throw new Error((\"Sorry, the { \" + key + \" } option is not yet supported with update().\"));\n\t        }\n\t    });\n\t    var oldCanvas = this._settings.canvas;\n\t    var oldContext = this._settings.context;\n\t    for (var key in opt) {\n\t        var value = opt[key];\n\t        if (typeof value !== \"undefined\") {\n\t            this$1._settings[key] = value;\n\t        }\n\t    }\n\t    var timeOpts = Object.assign({}, this._settings, opt);\n\t    if (\"time\" in opt && \"frame\" in opt) \n\t        { throw new Error(\"You should specify { time } or { frame } but not both\"); }\n\t     else if (\"time\" in opt) \n\t        { delete timeOpts.frame; }\n\t     else if (\"frame\" in opt) \n\t        { delete timeOpts.time; }\n\t    if (\"duration\" in opt && \"totalFrames\" in opt) \n\t        { throw new Error(\"You should specify { duration } or { totalFrames } but not both\"); }\n\t     else if (\"duration\" in opt) \n\t        { delete timeOpts.totalFrames; }\n\t     else if (\"totalFrames\" in opt) \n\t        { delete timeOpts.duration; }\n\t    if (\"data\" in opt) \n\t        { this._props.data = opt.data; }\n\t    var timeProps = this.getTimeProps(timeOpts);\n\t    Object.assign(this._props, timeProps);\n\t    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n\t        var ref = createCanvas(this._settings);\n\t            var canvas = ref.canvas;\n\t            var context = ref.context;\n\t        this.props.canvas = canvas;\n\t        this.props.context = context;\n\t        this._setupGLKey();\n\t        this._appendCanvasIfNeeded();\n\t    }\n\t    if (opt.p5 && typeof opt.p5 !== \"function\") {\n\t        this.props.p5 = opt.p5;\n\t        this.props.p5.draw = (function () {\n\t            if (this$1._isP5Resizing) \n\t                { return; }\n\t            this$1._lastRedrawResult = this$1.submitDrawCall();\n\t        });\n\t    }\n\t    if (\"playing\" in opt) {\n\t        if (opt.playing) \n\t            { this.play(); }\n\t         else \n\t            { this.pause(); }\n\t    }\n\t    checkSettings(this._settings);\n\t    this.resize();\n\t    this.render();\n\t    return this.props;\n\t};\n\tSketchManager.prototype.resize = function resize () {\n\t    var oldSizes = this._getSizeProps();\n\t    var settings = this.settings;\n\t    var props = this.props;\n\t    var newProps = resizeCanvas(props, settings);\n\t    Object.assign(this._props, newProps);\n\t    var ref = this.props;\n\t        var pixelRatio = ref.pixelRatio;\n\t        var canvasWidth = ref.canvasWidth;\n\t        var canvasHeight = ref.canvasHeight;\n\t        var styleWidth = ref.styleWidth;\n\t        var styleHeight = ref.styleHeight;\n\t    var canvas = this.props.canvas;\n\t    if (canvas && settings.resizeCanvas !== false) {\n\t        if (props.p5) {\n\t            if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n\t                this._isP5Resizing = true;\n\t                props.p5.pixelDensity(pixelRatio);\n\t                props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n\t                this._isP5Resizing = false;\n\t            }\n\t        } else {\n\t            if (canvas.width !== canvasWidth) \n\t                { canvas.width = canvasWidth; }\n\t            if (canvas.height !== canvasHeight) \n\t                { canvas.height = canvasHeight; }\n\t        }\n\t        if (isBrowser() && settings.styleCanvas !== false) {\n\t            canvas.style.width = styleWidth + \"px\";\n\t            canvas.style.height = styleHeight + \"px\";\n\t        }\n\t    }\n\t    var newSizes = this._getSizeProps();\n\t    var changed = !deepEqual_1(oldSizes, newSizes);\n\t    if (changed) {\n\t        this._sizeChanged();\n\t    }\n\t    return changed;\n\t};\n\tSketchManager.prototype._sizeChanged = function _sizeChanged () {\n\t    if (this.sketch && typeof this.sketch.resize === \"function\") {\n\t        this.sketch.resize(this.props);\n\t    }\n\t};\n\tSketchManager.prototype.animate = function animate () {\n\t    if (!this.props.playing) \n\t        { return; }\n\t    if (!isBrowser()) {\n\t        console.error(\"[canvas-sketch] WARN: Animation in Node.js is not yet supported\");\n\t        return;\n\t    }\n\t    this._raf = window.requestAnimationFrame(this._animateHandler);\n\t    var now = browser();\n\t    var fps = this.props.fps;\n\t    var frameIntervalMS = 1000 / fps;\n\t    var deltaTimeMS = now - this._lastTime;\n\t    var duration = this.props.duration;\n\t    var hasDuration = typeof duration === \"number\" && isFinite(duration);\n\t    var isNewFrame = true;\n\t    var playbackRate = this.settings.playbackRate;\n\t    if (playbackRate === \"fixed\") {\n\t        deltaTimeMS = frameIntervalMS;\n\t    } else if (playbackRate === \"throttle\") {\n\t        if (deltaTimeMS > frameIntervalMS) {\n\t            now = now - deltaTimeMS % frameIntervalMS;\n\t            this._lastTime = now;\n\t        } else {\n\t            isNewFrame = false;\n\t        }\n\t    } else {\n\t        this._lastTime = now;\n\t    }\n\t    var deltaTime = deltaTimeMS / 1000;\n\t    var newTime = this.props.time + deltaTime * this.props.timeScale;\n\t    if (newTime < 0 && hasDuration) {\n\t        newTime = duration + newTime;\n\t    }\n\t    var isFinished = false;\n\t    var isLoopStart = false;\n\t    var looping = this.settings.loop !== false;\n\t    if (hasDuration && newTime >= duration) {\n\t        if (looping) {\n\t            isNewFrame = true;\n\t            newTime = newTime % duration;\n\t            isLoopStart = true;\n\t        } else {\n\t            isNewFrame = false;\n\t            newTime = duration;\n\t            isFinished = true;\n\t        }\n\t        this._signalEnd();\n\t    }\n\t    if (isNewFrame) {\n\t        this.props.deltaTime = deltaTime;\n\t        this.props.time = newTime;\n\t        this.props.playhead = this._computePlayhead(newTime, duration);\n\t        var lastFrame = this.props.frame;\n\t        this.props.frame = this._computeCurrentFrame();\n\t        if (isLoopStart) \n\t            { this._signalBegin(); }\n\t        if (lastFrame !== this.props.frame) \n\t            { this.tick(); }\n\t        this.render();\n\t        this.props.deltaTime = 0;\n\t    }\n\t    if (isFinished) {\n\t        this.pause();\n\t    }\n\t};\n\tSketchManager.prototype.dispatch = function dispatch (cb) {\n\t    if (typeof cb !== \"function\") \n\t        { throw new Error(\"must pass function into dispatch()\"); }\n\t    cb(this.props);\n\t    this.render();\n\t};\n\tSketchManager.prototype.mount = function mount () {\n\t    this._appendCanvasIfNeeded();\n\t};\n\tSketchManager.prototype.unmount = function unmount () {\n\t    if (isBrowser()) {\n\t        window.removeEventListener(\"resize\", this._resizeHandler);\n\t        this._keyboardShortcuts.detach();\n\t    }\n\t    if (this.props.canvas.parentElement) {\n\t        this.props.canvas.parentElement.removeChild(this.props.canvas);\n\t    }\n\t};\n\tSketchManager.prototype._appendCanvasIfNeeded = function _appendCanvasIfNeeded () {\n\t    if (!isBrowser()) \n\t        { return; }\n\t    if (this.settings.parent !== false && this.props.canvas && !this.props.canvas.parentElement) {\n\t        var defaultParent = this.settings.parent || document.body;\n\t        defaultParent.appendChild(this.props.canvas);\n\t    }\n\t};\n\tSketchManager.prototype._setupGLKey = function _setupGLKey () {\n\t    if (this.props.context) {\n\t        if (isWebGLContext(this.props.context)) {\n\t            this._props.gl = this.props.context;\n\t        } else {\n\t            delete this._props.gl;\n\t        }\n\t    }\n\t};\n\tSketchManager.prototype.getTimeProps = function getTimeProps (settings) {\n\t        if ( settings === void 0 ) settings = {};\n\n\t    var duration = settings.duration;\n\t    var totalFrames = settings.totalFrames;\n\t    var timeScale = defined(settings.timeScale, 1);\n\t    var fps = defined(settings.fps, 24);\n\t    var hasDuration = typeof duration === \"number\" && isFinite(duration);\n\t    var hasTotalFrames = typeof totalFrames === \"number\" && isFinite(totalFrames);\n\t    var totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n\t    var durationFromTotalFrames = hasTotalFrames ? totalFrames / fps : undefined;\n\t    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n\t        throw new Error(\"You should specify either duration or totalFrames, but not both. Or, they must match exactly.\");\n\t    }\n\t    if (typeof settings.dimensions === \"undefined\" && typeof settings.units !== \"undefined\") {\n\t        console.warn(\"You've specified a { units } setting but no { dimension }, so the units will be ignored.\");\n\t    }\n\t    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n\t    duration = defined(duration, durationFromTotalFrames, Infinity);\n\t    var startTime = settings.time;\n\t    var startFrame = settings.frame;\n\t    var hasStartTime = typeof startTime === \"number\" && isFinite(startTime);\n\t    var hasStartFrame = typeof startFrame === \"number\" && isFinite(startFrame);\n\t    var time = 0;\n\t    var frame = 0;\n\t    var playhead = 0;\n\t    if (hasStartTime && hasStartFrame) {\n\t        throw new Error(\"You should specify either start frame or time, but not both.\");\n\t    } else if (hasStartTime) {\n\t        time = startTime;\n\t        playhead = this._computePlayhead(time, duration);\n\t        frame = this._computeFrame(playhead, time, totalFrames, fps);\n\t    } else if (hasStartFrame) {\n\t        frame = startFrame;\n\t        time = frame / fps;\n\t        playhead = this._computePlayhead(time, duration);\n\t    }\n\t    return {\n\t        playhead: playhead,\n\t        time: time,\n\t        frame: frame,\n\t        duration: duration,\n\t        totalFrames: totalFrames,\n\t        fps: fps,\n\t        timeScale: timeScale\n\t    };\n\t};\n\tSketchManager.prototype.setup = function setup (settings) {\n\t        var this$1 = this;\n\t        if ( settings === void 0 ) settings = {};\n\n\t    if (this.sketch) \n\t        { throw new Error(\"Multiple setup() calls not yet supported.\"); }\n\t    this._settings = Object.assign({}, settings, this._settings);\n\t    checkSettings(this._settings);\n\t    var ref = createCanvas(this._settings);\n\t        var context = ref.context;\n\t        var canvas = ref.canvas;\n\t    var timeProps = this.getTimeProps(this._settings);\n\t    this._props = Object.assign({}, timeProps,\n\t        {canvas: canvas,\n\t        context: context,\n\t        deltaTime: 0,\n\t        started: false,\n\t        exporting: false,\n\t        playing: false,\n\t        recording: false,\n\t        settings: this.settings,\n\t        data: this.settings.data,\n\t        render: function () { return this$1.render(); },\n\t        togglePlay: function () { return this$1.togglePlay(); },\n\t        dispatch: function (cb) { return this$1.dispatch(cb); },\n\t        tick: function () { return this$1.tick(); },\n\t        resize: function () { return this$1.resize(); },\n\t        update: function (opt) { return this$1.update(opt); },\n\t        exportFrame: function (opt) { return this$1.exportFrame(opt); },\n\t        record: function () { return this$1.record(); },\n\t        play: function () { return this$1.play(); },\n\t        pause: function () { return this$1.pause(); },\n\t        stop: function () { return this$1.stop(); }});\n\t    this._setupGLKey();\n\t    this.resize();\n\t};\n\tSketchManager.prototype.loadAndRun = function loadAndRun (canvasSketch, newSettings) {\n\t        var this$1 = this;\n\n\t    return this.load(canvasSketch, newSettings).then(function () {\n\t        this$1.run();\n\t        return this$1;\n\t    });\n\t};\n\tSketchManager.prototype.unload = function unload () {\n\t        var this$1 = this;\n\n\t    this.pause();\n\t    if (!this.sketch) \n\t        { return; }\n\t    if (typeof this.sketch.unload === \"function\") {\n\t        this._wrapContextScale(function (props) { return this$1.sketch.unload(props); });\n\t    }\n\t    this._sketch = null;\n\t};\n\tSketchManager.prototype.destroy = function destroy () {\n\t    this.unload();\n\t    this.unmount();\n\t};\n\tSketchManager.prototype.load = function load (createSketch, newSettings) {\n\t        var this$1 = this;\n\n\t    if (typeof createSketch !== \"function\") {\n\t        throw new Error(\"The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)\");\n\t    }\n\t    if (this.sketch) {\n\t        this.unload();\n\t    }\n\t    if (typeof newSettings !== \"undefined\") {\n\t        this.update(newSettings);\n\t    }\n\t    this._preRender();\n\t    var preload = Promise.resolve();\n\t    if (this.settings.p5) {\n\t        if (!isBrowser()) {\n\t            throw new Error(\"[canvas-sketch] ERROR: Using p5.js in Node.js is not supported\");\n\t        }\n\t        preload = new Promise(function (resolve) {\n\t            var P5Constructor = this$1.settings.p5;\n\t            var preload;\n\t            if (P5Constructor.p5) {\n\t                preload = P5Constructor.preload;\n\t                P5Constructor = P5Constructor.p5;\n\t            }\n\t            var p5Sketch = function (p5) {\n\t                if (preload) \n\t                    { p5.preload = (function () { return preload(p5); }); }\n\t                p5.setup = (function () {\n\t                    var props = this$1.props;\n\t                    var isGL = this$1.settings.context === \"webgl\";\n\t                    var renderer = isGL ? p5.WEBGL : p5.P2D;\n\t                    p5.noLoop();\n\t                    p5.pixelDensity(props.pixelRatio);\n\t                    p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n\t                    if (isGL && this$1.settings.attributes) {\n\t                        p5.setAttributes(this$1.settings.attributes);\n\t                    }\n\t                    this$1.update({\n\t                        p5: p5,\n\t                        canvas: p5.canvas,\n\t                        context: p5._renderer.drawingContext\n\t                    });\n\t                    resolve();\n\t                });\n\t            };\n\t            if (typeof P5Constructor === \"function\") {\n\t                new P5Constructor(p5Sketch);\n\t            } else {\n\t                if (typeof window.createCanvas !== \"function\") {\n\t                    throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n\t                }\n\t                p5Sketch(window);\n\t            }\n\t        });\n\t    }\n\t    return preload.then(function () {\n\t        var loader = createSketch(this$1.props);\n\t        if (!isPromise_1(loader)) {\n\t            loader = Promise.resolve(loader);\n\t        }\n\t        return loader;\n\t    }).then(function (sketch) {\n\t        if (!sketch) \n\t            { sketch = {}; }\n\t        this$1._sketch = sketch;\n\t        if (isBrowser()) {\n\t            this$1._keyboardShortcuts.attach();\n\t            window.addEventListener(\"resize\", this$1._resizeHandler);\n\t        }\n\t        this$1._postRender();\n\t        this$1._sizeChanged();\n\t        return this$1;\n\t    }).catch(function (err) {\n\t        console.warn(\"Could not start sketch, the async loading function rejected with an error:\\n    Error: \" + err.message);\n\t        throw err;\n\t    });\n\t};\n\n\tObject.defineProperties( SketchManager.prototype, prototypeAccessors );\n\n\tvar CACHE = 'hot-id-cache';\n\tvar runtimeCollisions = [];\n\tfunction isHotReload() {\n\t    var client = getClientAPI();\n\t    return client && client.hot;\n\t}\n\n\tfunction cacheGet(id) {\n\t    var client = getClientAPI();\n\t    if (!client) \n\t        { return undefined; }\n\t    client[CACHE] = client[CACHE] || {};\n\t    return client[CACHE][id];\n\t}\n\n\tfunction cachePut(id, data) {\n\t    var client = getClientAPI();\n\t    if (!client) \n\t        { return undefined; }\n\t    client[CACHE] = client[CACHE] || {};\n\t    client[CACHE][id] = data;\n\t}\n\n\tfunction getTimeProp(oldManager, newSettings) {\n\t    return newSettings.animate ? {\n\t        time: oldManager.props.time\n\t    } : undefined;\n\t}\n\n\tfunction canvasSketch(sketch, settings) {\n\t    if ( settings === void 0 ) settings = {};\n\n\t    if (settings.p5) {\n\t        if (settings.canvas || settings.context && typeof settings.context !== 'string') {\n\t            throw new Error(\"In { p5 } mode, you can't pass your own canvas or context, unless the context is a \\\"webgl\\\" or \\\"2d\\\" string\");\n\t        }\n\t        var context = typeof settings.context === 'string' ? settings.context : false;\n\t        settings = Object.assign({}, settings, {\n\t            canvas: false,\n\t            context: context\n\t        });\n\t    }\n\t    var isHot = isHotReload();\n\t    var hotID;\n\t    if (isHot) {\n\t        hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n\t    }\n\t    var isInjecting = isHot && typeof hotID === 'string';\n\t    if (isInjecting && runtimeCollisions.includes(hotID)) {\n\t        console.warn(\"Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. \", hotID);\n\t        isInjecting = false;\n\t    }\n\t    var preload = Promise.resolve();\n\t    if (isInjecting) {\n\t        runtimeCollisions.push(hotID);\n\t        var previousData = cacheGet(hotID);\n\t        if (previousData) {\n\t            var next = function () {\n\t                var newProps = getTimeProp(previousData.manager, settings);\n\t                previousData.manager.destroy();\n\t                return newProps;\n\t            };\n\t            preload = previousData.load.then(next).catch(next);\n\t        }\n\t    }\n\t    return preload.then(function (newProps) {\n\t        var manager = new SketchManager();\n\t        var result;\n\t        if (sketch) {\n\t            settings = Object.assign({}, settings, newProps);\n\t            manager.setup(settings);\n\t            manager.mount();\n\t            result = manager.loadAndRun(sketch);\n\t        } else {\n\t            result = Promise.resolve(manager);\n\t        }\n\t        if (isInjecting) {\n\t            cachePut(hotID, {\n\t                load: result,\n\t                manager: manager\n\t            });\n\t        }\n\t        return result;\n\t    });\n\t}\n\n\tcanvasSketch.canvasSketch = canvasSketch;\n\tcanvasSketch.PaperSizes = paperSizes;\n\n\treturn canvasSketch;\n\n})));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/canvas-sketch/dist/canvas-sketch.umd.js\n");

/***/ })

};
;